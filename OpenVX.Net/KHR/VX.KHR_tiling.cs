
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenVX
{
	public partial class VX
	{
		public const string OPENVX_KHR_TILING = "vx_khr_tiling";

		public const int MAX_TILING_PLANES = 4;

		public const int KERNEL_INPUT_NEIGHBORHOOD = (((ID_KHRONOS) << 20) | ( TYPE_KERNEL << 8)) + 0x7;

		public const int KERNEL_OUTPUT_TILE_BLOCK_SIZE = (((ID_KHRONOS) << 20) | ( TYPE_KERNEL << 8)) + 0x8;

		public const int KERNEL_BORDER = (((ID_KHRONOS) << 20) | ( TYPE_KERNEL << 8)) + 0x9;

		public const int KERNEL_TILE_MEMORY_SIZE = (((ID_KHRONOS) << 20) | ( TYPE_KERNEL << 8)) + 0xA;

		public const int KERNEL_INPUT_TILE_BLOCK_SIZE = (((ID_KHRONOS) << 20) | ( TYPE_KERNEL << 8)) + 0xB;

		public const int KERNEL_OUTPUT_NEIGHBORHOOD = (((ID_KHRONOS) << 20) | ( TYPE_KERNEL << 8)) + 0xC;

		public const int NODE_INPUT_NEIGHBORHOOD = (((ID_KHRONOS) << 20) | ( TYPE_NODE << 8)) + 0xB;

		public const int NODE_OUTPUT_TILE_BLOCK_SIZE = (((ID_KHRONOS) << 20) | ( TYPE_NODE << 8)) + 0xC;

		public const int NODE_TILE_MEMORY_SIZE = (((ID_KHRONOS) << 20) | ( TYPE_NODE << 8)) + 0xD;

		public const int NODE_INPUT_TILE_BLOCK_SIZE = (((ID_KHRONOS) << 20) | ( TYPE_NODE << 8)) + 0xE;

		public const int NODE_OUTPUT_NEIGHBORHOOD = (((ID_KHRONOS) << 20) | ( TYPE_NODE << 8)) + 0xF;

		public const int BORDER_MODE_SELF = ((ID_KHRONOS << 20) | ( ENUM_BORDER << 12)) + 0x3;

		public static Kernel AddTilingKernel(Context context, string name, int enumeration, TilingKernelCallback flexible_func_ptr, TilingKernelCallback fast_func_ptr, uint num_params, KernelInputValidateCallback input, KernelOutputValidateCallback output)
		{
			Kernel retValue;

			Debug.Assert(Delegates.pvxAddTilingKernel != null, "pvxAddTilingKernel not implemented");
			retValue = Delegates.pvxAddTilingKernel(context, name, enumeration, flexible_func_ptr, fast_func_ptr, num_params, input, output);
			LogCommand("vxAddTilingKernel", retValue, context, name, enumeration, flexible_func_ptr, fast_func_ptr, num_params, input, output			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		internal static unsafe partial class Delegates
		{
			[SuppressUnmanagedCodeSecurity]
			internal delegate Kernel vxAddTilingKernel(Context context, string name, int enumeration, TilingKernelCallback flexible_func_ptr, TilingKernelCallback fast_func_ptr, uint num_params, KernelInputValidateCallback input, KernelOutputValidateCallback output);

			internal static vxAddTilingKernel pvxAddTilingKernel;

		}
	}

}
