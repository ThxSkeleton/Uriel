<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using System;
using System.Runtime.InteropServices;

namespace OpenVX
{
	public partial class VX
	{
		#region CreateScalar

<#
	object[] templatesParams =	new object[] {
		new[] { "Int8", "sbyte" },
		new[] { "Uint8", "byte" },
		new[] { "Int16", "short" },
		new[] { "Uint16", "ushort" },
		new[] { "Int32", "int" },
		new[] { "Uint32", "uint" },
		new[] { "Int64", "long" },
		new[] { "Uint64", "ulong" },
		new[] { "Float32", "float" },
		new[] { "Float64", "double" },
		new[] { "DfImage", "DfImage" }
	};

	for (int i = 0; i < templatesParams.Length; i++) {
		object[] templateParams = (object[])templatesParams[i];
		string vxType = (string)templateParams[0];
		string underlyingType = (string)templateParams[1];
#>
		public static Scalar CreateScalar(Context context, ref <#= underlyingType #> obj)
		{
			unsafe {
				fixed (<#= underlyingType #>* p_obj = &obj) {
					return (CreateScalar(context, Type.<#= vxType #>, new IntPtr(p_obj)));
				}
			}
		}

<#
}
#>
	
		#endregion

		#region Query(Array)

<#
	object[] queryTemplatesParams =	new object[] {
		new[] { "OpenVX.Type", "4" },
		new[] { "UIntPtr", "UIntPtr.Size" },
	};

	for (int i = 0; i < queryTemplatesParams.Length; i++) {
		object[] templateParams = (object[])queryTemplatesParams[i];
		string underlyingType = (string)templateParams[0];
		string underlyingTypeSize = (string)templateParams[1];
#>
		public static Status Query(Array arr, ArrayAttribute attribute, out <#= underlyingType #> obj)
		{
			unsafe {
				fixed (<#= underlyingType #> *p_obj = &obj) {
					return (Query(arr, attribute, new IntPtr(p_obj), (UIntPtr)<#= underlyingTypeSize #>));
				}
			}
		}

<#
}
#>
		#endregion

		#region Query(Delay)

<#
	object[] queryDelayTemplatesParams =	new object[] {
		new[] { "OpenVX.Type", "4" },
		new[] { "UIntPtr", "UIntPtr.Size" },
	};

	for (int i = 0; i < queryDelayTemplatesParams.Length; i++) {
		object[] templateParams = (object[])queryDelayTemplatesParams[i];
		string underlyingType = (string)templateParams[0];
		string underlyingTypeSize = (string)templateParams[1];
#>
		public static Status Query(Delay delay, DelayAttribute attribute, out <#= underlyingType #> obj)
		{
			unsafe {
				fixed (<#= underlyingType #> *p_obj = &obj) {
					return (Query(delay, attribute, new IntPtr(p_obj), (UIntPtr)<#= underlyingTypeSize #>));
				}
			}
		}

<#
}
#>
		#endregion

		#region Query(Graph)

<#
	object[] graphTemplatesParams =	new object[] {
		new[] { "UIntPtr", "UIntPtr.Size" },
		new[] { "Status", "4" },
		new[] { "Perf", "64" },
	};

	for (int i = 0; i < graphTemplatesParams.Length; i++) {
		object[] templateParams = (object[])graphTemplatesParams[i];
		string underlyingType = (string)templateParams[0];
		string underlyingTypeSize = (string)templateParams[1];
#>
		public static Status Query(Graph graph, GraphAttribute attribute, out <#= underlyingType #> obj)
		{
			unsafe {
				fixed (<#= underlyingType #> *p_obj = &obj) {
					return (Query(graph, attribute, new IntPtr(p_obj), (UIntPtr)<#= underlyingTypeSize #>));
				}
			}
		}

<#
}
#>
		#endregion

		#region Query(Scalar)

<#
	object[] queryScalarTemplatesParams = new object[] {
		new[] { "OpenVX.Type", "4" },
	};

	for (int i = 0; i < queryScalarTemplatesParams.Length; i++) {
		object[] templateParams = (object[])queryScalarTemplatesParams[i];
		string underlyingType = (string)templateParams[0];
		string underlyingTypeSize = (string)templateParams[1];
#>
		public static Status Query(Scalar scalar, ScalarAttribute attribute, out <#= underlyingType #> obj)
		{
			unsafe {
				fixed (<#= underlyingType #> *p_obj = &obj) {
					return (Query(scalar, attribute, new IntPtr(p_obj), (UIntPtr)<#= underlyingTypeSize #>));
				}
			}
		}

<#
}
#>
		#endregion

		#region Release(params Object[])

<#
	object[] releaseObjectsTemplatesParams =	new object[] {
		new object[] { "Array",			true },
		new object[] { "Context",		true },
		new object[] { "Convolution",	true },
		new object[] { "Delay",			true },
		new object[] { "Distribution",	true },
		new object[] { "Graph",			true },
		new object[] { "Kernel",		true },
		new object[] { "Image",			true },
		new object[] { "Import",		true },
		new object[] { "Lut",			true },
		new object[] { "Matrix",		true },
		new object[] { "Node",			true },
		new object[] { "ObjectArray",	true },
		new object[] { "Parameter",		true },
		new object[] { "Pyramid",		true },
		new object[] { "Remap",			true },
		new object[] { "Scalar",		true },
		new object[] { "Tensor",		true },
		new object[] { "Threshold",		true }
	};

	for (int i = 0; i < releaseObjectsTemplatesParams.Length; i++) {
		object[] templateParams = (object[])releaseObjectsTemplatesParams[i];
		string underlyingType = (string)templateParams[0];
#>
		public static void Release(params <#= underlyingType #>[] objs)
		{
			for (int i = 0; i < objs.Length; i++)
				Release(ref objs[i]);
		}

<#
}
#>
		#endregion
	}
}