<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using System;
#if HAVE_SYSTEM_DRAWING
using System.Drawing;
#endif

using NUnit.Framework;

// ReSharper disable InconsistentNaming

namespace OpenGL.Test
{
<#
	string[] postfixes =		new[] { "8",    "15",     "16",     "24",    "48",     "96",    "F",     "D",      "HF"        };
	string[] interfaceTypes =	new[] { "byte", "byte",	  "byte",   "byte",  "ushort", "uint",  "float", "double", "HalfFloat" };
	string[] structType =		new[] { "byte", "ushort", "ushort", "byte",  "ushort", "uint",  "float", "double", "HalfFloat" };
	string[] castSuffixes =		new[] { null,   null,    null,       "ub",     "us",     "ui",    "f",     "d",       "hf" };
	string[] ones =				new[] { "byte.MaxValue", "byte.MaxValue", "byte.MaxValue", "byte.MaxValue","ushort.MaxValue", "uint.MaxValue", "1.0f", "1.0", "(HalfFloat)1.0f" };
	string[] colorSuffixes =	new[] { null,   null,    null,       "32",    "64",     null,    "F",     null,     "HF" };

	for (int i = 0; i < postfixes.Length; i++) {
		string className = String.Format("ColorRGB{0}", postfixes[i]);
		string interfaceType = interfaceTypes[i];
		string componentType = structType[i];
		string castSuffix = castSuffixes[i];
		string one = ones[i];
		string colorSuffix = colorSuffixes[i];

		if (one == null)
			one = interfaceType + ".MaxValue";
#>
	[TestFixture]
	[Category("Math")]
	internal class <#= className #>Test : TestBase
	{
		#region Constructors

		[Test(Description = "Test <#= className #>(<#= interfaceType #>, <#= interfaceType #>, <#= interfaceType #>)")]
		public void <#= className #>_TestConstructor1()
		{
			<#= interfaceType #> r = (<#= interfaceType #>)<#= one #>;
			<#= interfaceType #> g = (<#= interfaceType #>)<#= one #>;
			<#= interfaceType #> b = (<#= interfaceType #>)<#= one #>;
			
			<#= className #> v = new <#= className #>(r, g, b);

			Assert.AreEqual(r, v.Red);
			Assert.AreEqual(g, v.Green);
			Assert.AreEqual(b, v.Blue);
		}

		#endregion

		#region Cast Operators
<# if (colorSuffix != null) { #>

		[Test(Description = "Test (ColorRGBA<#= colorSuffix #>)<#= className #>")]
		public void <#= className #>_CastToRGBA()
		{
			<#= interfaceType #> r = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> g = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> b = (<#= interfaceType #>)NextComponent(<#= one #>);

			<#= className #> v = new <#= className #>(r, g, b);
			ColorRGBA<#= colorSuffix #> vRGBA = v;
		}
<# } #>

<# if (castSuffix != null) { #>
		[Test(Description = "Test (Vertex4ub)<#= className #>")]
		public void <#= className #>_CastToArray()
		{
			<#= interfaceType #> r = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> g = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> b = (<#= interfaceType #>)NextComponent(<#= one #>);

			<#= className #> v = new <#= className #>(r, g, b);
			<#= componentType #>[] vArray = v;

			Assert.AreEqual(3, vArray.Length);
			Assert.AreEqual(r, vArray[0]);
			Assert.AreEqual(g, vArray[1]);
			Assert.AreEqual(b, vArray[2]);
		}

		[Test(Description = "Test (Vertex4ub)<#= className #>")]
		public void <#= className #>_CastToVertex4()
		{
			<#= interfaceType #> r = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> g = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> b = (<#= interfaceType #>)NextComponent(<#= one #>);
			
			<#= className #> v = new <#= className #>(r, g, b);
			Vertex3<#= castSuffix #> vArray = v;

			Assert.AreEqual(r, vArray.x);
			Assert.AreEqual(g, vArray.y);
			Assert.AreEqual(b, vArray.z);
		}
<# } #>

#if HAVE_SYSTEM_DRAWING

		[Test(Description = "Test (<#= className #>)Color")]
		public void <#= className #>_CastFromColor()
		{
			const double Epsilon = 0.25;

			double r = NextComponent(1.0);
			double g = NextComponent(1.0);
			double b = NextComponent(1.0);

			Color c = Color.FromArgb(byte.MaxValue, (int)(r * byte.MaxValue), (int)(g * byte.MaxValue), (int)(b * byte.MaxValue));
			
			<#= className #> v = (<#= className #>)c;

			Assert.AreEqual((float)r, v[0], Epsilon);
			Assert.AreEqual((float)g, v[1], Epsilon);
			Assert.AreEqual((float)b, v[2], Epsilon);

			// Not influenced by alpha
			c = Color.FromArgb(0, (int)(r * byte.MaxValue), (int)(g * byte.MaxValue), (int)(b * byte.MaxValue));
			v = (<#= className #>)c;

			Assert.AreEqual((float)r, v[0], Epsilon);
			Assert.AreEqual((float)g, v[1], Epsilon);
			Assert.AreEqual((float)b, v[2], Epsilon);
		}

#endif

		#endregion

		#region IColor Implementation

		[Test(Description = "Test <#= className #>.PixelType")]
		public void <#= className #>_PixelType()
		{
			<#= interfaceType #> r = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> g = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> b = (<#= interfaceType #>)NextComponent(<#= one #>);

			<#= className #> v = new <#= className #>(r, g, b);

			Assert.AreNotEqual(PixelLayout.None, v.PixelType);
		}

		[Test(Description = "Test <#= className #>int]")]
		public void <#= className #>_Accessor()
		{
			<#= interfaceType #> r = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> g = (<#= interfaceType #>)NextComponent(<#= one #>);
			<#= interfaceType #> b = (<#= interfaceType #>)NextComponent(<#= one #>);

			<#= className #> v = new <#= className #>(r, g, b);
			float c;

			Assert.DoesNotThrow(() => c = v[0]);
			Assert.DoesNotThrow(() => c = v[1]);
			Assert.DoesNotThrow(() => c = v[2]);
			Assert.Throws<IndexOutOfRangeException>(() => c = v[+3]);
			Assert.Throws<IndexOutOfRangeException>(() => c = v[-1]);

			Assert.DoesNotThrow(() => v[0] = 1.0f);
			Assert.DoesNotThrow(() => v[1] = 1.0f);
			Assert.DoesNotThrow(() => v[2] = 1.0f);
			Assert.Throws<IndexOutOfRangeException>(() => v[+3] = 0.0f);
			Assert.Throws<IndexOutOfRangeException>(() => v[-1] = 0.0f);

			Assert.DoesNotThrow(() => v[2] = 0.0f);
			Assert.DoesNotThrow(() => v[2] = 1.0f);
			Assert.Throws<InvalidOperationException>(() => v[2] = -1.0f);
			Assert.Throws<InvalidOperationException>(() => v[2] = +1.1f);
		}

		#endregion
	}

<#
	}
#>
}