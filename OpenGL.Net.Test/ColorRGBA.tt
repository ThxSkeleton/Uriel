<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2017-2018 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using System;
#if HAVE_SYSTEM_DRAWING
using System.Drawing;
#endif

using NUnit.Framework;

// ReSharper disable InconsistentNaming

namespace OpenGL.Test
{
<#
	string[] postfixes =			new[] { "32",     "64",     "F",     "HF"        };
	string[] interfaceTypes =		new[] { "byte",   "ushort", "float", "HalfFloat" };
	string[] castSuffixes =			new[] { "ub",   "us", "f", "hf" };
	string[] ones =					new[] { null,     null,     "1.0f",  "(HalfFloat)1.0f"};

	for (int i = 0; i < postfixes.Length; i++) {
		string className = String.Format("ColorRGBA{0}", postfixes[i]);
		string baseType = interfaceTypes[i];
		string castSuffix = castSuffixes[i];
		string one = ones[i];

		if (one == null)
			one = baseType + ".MaxValue";
#>
	[TestFixture, Category("Math")]
	internal class <#= className #>Test : TestBase
	{
		#region Constructors

		[Test]
		public void <#= className #>_TestConstructor1()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= one #>);
			
			<#= className #> v = new <#= className #>(r, g, b);

			Assert.AreEqual(r, v.r);
			Assert.AreEqual(g, v.g);
			Assert.AreEqual(b, v.b);
			Assert.AreEqual(<#= one #>, v.a);
		}

		[Test]
		public void <#= className #>_TestConstructor2()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> a = (<#= baseType #>)NextComponent(<#= one #>);
			
			<#= className #> v = new <#= className #>(r, g, b, a);

			Assert.AreEqual(r, v.r);
			Assert.AreEqual(g, v.g);
			Assert.AreEqual(b, v.b);
			Assert.AreEqual(a, v.a);
		}

		#endregion

		#region Cast Operators

		[Test]
		public void <#= className #>_CastToArray()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> a = (<#= baseType #>)NextComponent(<#= one #>);
			
			<#= className #> v = new <#= className #>(r, g, b, a);
			<#= baseType #>[] vArray = v;

			Assert.AreEqual(4, vArray.Length);
			Assert.AreEqual(r, vArray[0]);
			Assert.AreEqual(g, vArray[1]);
			Assert.AreEqual(b, vArray[2]);
			Assert.AreEqual(a, vArray[3]);
		}

		[Test]
		public void <#= className #>_CastToVertex4()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> a = (<#= baseType #>)NextComponent(<#= one #>);
			
			<#= className #> v = new <#= className #>(r, g, b, a);
			Vertex4<#= castSuffix #> vArray = v;

			Assert.AreEqual(r, vArray.x);
			Assert.AreEqual(g, vArray.y);
			Assert.AreEqual(b, vArray.z);
			Assert.AreEqual(a, vArray.w);
		}

#if HAVE_SYSTEM_DRAWING

		[Test]
		public void <#= className #>_CastFromColor()
		{
			const double Epsilon = 1e-2;

			double r = NextComponent(1.0);
			double g = NextComponent(1.0);
			double b = NextComponent(1.0);
			double a = NextComponent(1.0);

			Color c = Color.FromArgb((int)(a * byte.MaxValue), (int)(r * byte.MaxValue), (int)(g * byte.MaxValue), (int)(b * byte.MaxValue));
			
			<#= className #> v = (<#= className #>)c;

			Assert.AreEqual((float)r, v[0], Epsilon);
			Assert.AreEqual((float)g, v[1], Epsilon);
			Assert.AreEqual((float)b, v[2], Epsilon);
			Assert.AreEqual((float)a, v[3], Epsilon);
		}

#endif

		#endregion

		#region Arithmetic Operators

		[Test]
		public void <#= className #>_Multiply()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> a = (<#= baseType #>)NextComponent(<#= one #>);

			<#= className #> v = new <#= className #>(r, g, b, a);
			<#= className #> c = v * 0.5f;

			c = c * 2.0f;

			Assert.AreEqual(c.r, v.r, 1.0);
			Assert.AreEqual(c.g, v.g, 1.0);
			Assert.AreEqual(c.b, v.b, 1.0);
			Assert.AreEqual(c.a, v.a, 1.0);
		}

		#endregion

		#region Equality Operators

		[Test]
		public void <#= className #>_OperatorEquality()
		{
			<#= className #> v = <#= className #>.ColorRed;

			Assert.IsTrue(v == <#= className #>.ColorRed);
			Assert.IsFalse(v == <#= className #>.ColorGreen);
		}

		[Test]
		public void <#= className #>_OperatorInequality()
		{
			<#= className #> v = <#= className #>.ColorRed;

			Assert.IsFalse(v != <#= className #>.ColorRed);
			Assert.IsTrue(v != <#= className #>.ColorGreen);
		}

		#endregion

		#region IColor Implementation

		[Test]
		public void <#= className #>_PixelType()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> a = (<#= baseType #>)NextComponent(<#= one #>);

			<#= className #> v = new <#= className #>(r, g, b, a);

			Assert.AreNotEqual(PixelLayout.None, v.PixelType);
		}

		[Test]
		public void <#= className #>_Accessor()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= one #>);
			<#= baseType #> a = (<#= baseType #>)NextComponent(<#= one #>);

			<#= className #> v = new <#= className #>(r, g, b, a);
			float c;

			Assert.DoesNotThrow(() => c = v[0]);
			Assert.DoesNotThrow(() => c = v[1]);
			Assert.DoesNotThrow(() => c = v[2]);
			Assert.DoesNotThrow(() => c = v[3]);
			Assert.Throws<IndexOutOfRangeException>(() => c = v[+4]);
			Assert.Throws<IndexOutOfRangeException>(() => c = v[-1]);

			Assert.DoesNotThrow(() => v[0] = 1.0f);
			Assert.DoesNotThrow(() => v[1] = 1.0f);
			Assert.DoesNotThrow(() => v[2] = 1.0f);
			Assert.DoesNotThrow(() => v[3] = 1.0f);
			Assert.Throws<IndexOutOfRangeException>(() => v[+4] = 0.0f);
			Assert.Throws<IndexOutOfRangeException>(() => v[-1] = 0.0f);

			Assert.DoesNotThrow(() => v[3] = 0.0f);
			Assert.DoesNotThrow(() => v[3] = 1.0f);
			Assert.Throws<InvalidOperationException>(() => v[3] = -1.0f);
			Assert.Throws<InvalidOperationException>(() => v[3] = +1.1f);
		}

		#endregion

		#region IEquatable Implementation

		[Test]
		public void <#= className #>_Equals_<#= className #>_AbsPrecision()
		{
			
		}

		[Test]
		public void <#= className #>_Equals_<#= className #>()
		{
			<#= className #> v = <#= className #>.ColorRed;

			Assert.IsTrue(v.Equals(<#= className #>.ColorRed));
			Assert.IsFalse(v.Equals(<#= className #>.ColorGreen));
			Assert.IsFalse(v.Equals(<#= className #>.ColorBlue));
		}

		[Test]
		public void <#= className #>_Equals_Object()
		{
			<#= className #> v = <#= className #>.ColorRed;

			Assert.IsFalse(v.Equals(null));
			Assert.IsFalse(v.Equals(String.Empty));
			Assert.IsFalse(v.Equals(0.0f));

			Assert.IsTrue(v.Equals((object)<#= className #>.ColorRed));
			Assert.IsFalse(v.Equals((object)<#= className #>.ColorGreen));
			Assert.IsFalse(v.Equals((object)<#= className #>.ColorBlue));
		}

		[Test]
		public void <#= className #>_GetHashCode()
		{
			<#= baseType #> r = (<#= baseType #>)NextComponent(<#= baseType #>.MaxValue);
			<#= baseType #> g = (<#= baseType #>)NextComponent(<#= baseType #>.MaxValue);
			<#= baseType #> b = (<#= baseType #>)NextComponent(<#= baseType #>.MaxValue);
			<#= baseType #> a = (<#= baseType #>)NextComponent(<#= baseType #>.MaxValue);

			<#= className #> v = new <#= className #>(r, g, b, a);

			Assert.DoesNotThrow(() => v.GetHashCode());
		}

		#endregion
	}

<#
	}
#>
}