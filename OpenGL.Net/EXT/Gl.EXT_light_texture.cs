
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_FRAGMENT_MATERIAL_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int FRAGMENT_MATERIAL_EXT = 0x8349;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_NORMAL_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int FRAGMENT_NORMAL_EXT = 0x834A;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_COLOR_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int FRAGMENT_COLOR_EXT = 0x834C;

		/// <summary>
		/// [GL] Value of GL_ATTENUATION_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int ATTENUATION_EXT = 0x834D;

		/// <summary>
		/// [GL] Value of GL_SHADOW_ATTENUATION_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int SHADOW_ATTENUATION_EXT = 0x834E;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_APPLICATION_MODE_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int TEXTURE_APPLICATION_MODE_EXT = 0x834F;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_LIGHT_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int TEXTURE_LIGHT_EXT = 0x8350;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_MATERIAL_FACE_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int TEXTURE_MATERIAL_FACE_EXT = 0x8351;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_MATERIAL_PARAMETER_EXT symbol.
		/// </summary>
		[RequiredByFeature("GL_EXT_light_texture")]
		public const int TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;

		/// <summary>
		/// [GL] glApplyTextureEXT: Binding for glApplyTextureEXT.
		/// </summary>
		/// <param name="mode">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_light_texture")]
		public static void ApplyTextureEXT(int mode)
		{
			Debug.Assert(Delegates.pglApplyTextureEXT != null, "pglApplyTextureEXT not implemented");
			Delegates.pglApplyTextureEXT(mode);
			LogCommand("glApplyTextureEXT", null, mode			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glTextureLightEXT: Binding for glTextureLightEXT.
		/// </summary>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_light_texture")]
		public static void TextureLightEXT(int pname)
		{
			Debug.Assert(Delegates.pglTextureLightEXT != null, "pglTextureLightEXT not implemented");
			Delegates.pglTextureLightEXT(pname);
			LogCommand("glTextureLightEXT", null, pname			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glTextureMaterialEXT: Binding for glTextureMaterialEXT.
		/// </summary>
		/// <param name="face">
		/// A <see cref="T:MaterialFace"/>.
		/// </param>
		/// <param name="mode">
		/// A <see cref="T:MaterialParameter"/>.
		/// </param>
		[RequiredByFeature("GL_EXT_light_texture")]
		public static void TextureMaterialEXT(MaterialFace face, MaterialParameter mode)
		{
			Debug.Assert(Delegates.pglTextureMaterialEXT != null, "pglTextureMaterialEXT not implemented");
			Delegates.pglTextureMaterialEXT((int)face, (int)mode);
			LogCommand("glTextureMaterialEXT", null, face, mode			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_EXT_light_texture")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glApplyTextureEXT(int mode);

			[RequiredByFeature("GL_EXT_light_texture")]
			[ThreadStatic]
			internal static glApplyTextureEXT pglApplyTextureEXT;

			[RequiredByFeature("GL_EXT_light_texture")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTextureLightEXT(int pname);

			[RequiredByFeature("GL_EXT_light_texture")]
			[ThreadStatic]
			internal static glTextureLightEXT pglTextureLightEXT;

			[RequiredByFeature("GL_EXT_light_texture")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTextureMaterialEXT(int face, int mode);

			[RequiredByFeature("GL_EXT_light_texture")]
			[ThreadStatic]
			internal static glTextureMaterialEXT pglTextureMaterialEXT;

		}
	}

}
