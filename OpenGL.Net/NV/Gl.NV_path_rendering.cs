
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_PATH_FORMAT_SVG_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_FORMAT_SVG_NV = 0x9070;

		/// <summary>
		/// [GL] Value of GL_PATH_FORMAT_PS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_FORMAT_PS_NV = 0x9071;

		/// <summary>
		/// [GL] Value of GL_STANDARD_FONT_NAME_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int STANDARD_FONT_NAME_NV = 0x9072;

		/// <summary>
		/// [GL] Value of GL_SYSTEM_FONT_NAME_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int SYSTEM_FONT_NAME_NV = 0x9073;

		/// <summary>
		/// [GL] Value of GL_FILE_NAME_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int FILE_NAME_NV = 0x9074;

		/// <summary>
		/// [GL] Value of GL_PATH_STROKE_WIDTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STROKE_WIDTH_NV = 0x9075;

		/// <summary>
		/// [GL] Value of GL_PATH_END_CAPS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_END_CAPS_NV = 0x9076;

		/// <summary>
		/// [GL] Value of GL_PATH_INITIAL_END_CAP_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_INITIAL_END_CAP_NV = 0x9077;

		/// <summary>
		/// [GL] Value of GL_PATH_TERMINAL_END_CAP_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_TERMINAL_END_CAP_NV = 0x9078;

		/// <summary>
		/// [GL] Value of GL_PATH_JOIN_STYLE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_JOIN_STYLE_NV = 0x9079;

		/// <summary>
		/// [GL] Value of GL_PATH_MITER_LIMIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_MITER_LIMIT_NV = 0x907A;

		/// <summary>
		/// [GL] Value of GL_PATH_DASH_CAPS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_DASH_CAPS_NV = 0x907B;

		/// <summary>
		/// [GL] Value of GL_PATH_INITIAL_DASH_CAP_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_INITIAL_DASH_CAP_NV = 0x907C;

		/// <summary>
		/// [GL] Value of GL_PATH_TERMINAL_DASH_CAP_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_TERMINAL_DASH_CAP_NV = 0x907D;

		/// <summary>
		/// [GL] Value of GL_PATH_DASH_OFFSET_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_DASH_OFFSET_NV = 0x907E;

		/// <summary>
		/// [GL] Value of GL_PATH_CLIENT_LENGTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_CLIENT_LENGTH_NV = 0x907F;

		/// <summary>
		/// [GL] Value of GL_PATH_FILL_MODE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_FILL_MODE_NV = 0x9080;

		/// <summary>
		/// [GL] Value of GL_PATH_FILL_MASK_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_FILL_MASK_NV = 0x9081;

		/// <summary>
		/// [GL] Value of GL_PATH_FILL_COVER_MODE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_FILL_COVER_MODE_NV = 0x9082;

		/// <summary>
		/// [GL] Value of GL_PATH_STROKE_COVER_MODE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STROKE_COVER_MODE_NV = 0x9083;

		/// <summary>
		/// [GL] Value of GL_PATH_STROKE_MASK_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STROKE_MASK_NV = 0x9084;

		/// <summary>
		/// [GL] Value of GL_COUNT_UP_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int COUNT_UP_NV = 0x9088;

		/// <summary>
		/// [GL] Value of GL_COUNT_DOWN_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int COUNT_DOWN_NV = 0x9089;

		/// <summary>
		/// [GL] Value of GL_PATH_OBJECT_BOUNDING_BOX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;

		/// <summary>
		/// [GL] Value of GL_CONVEX_HULL_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int CONVEX_HULL_NV = 0x908B;

		/// <summary>
		/// [GL] Value of GL_BOUNDING_BOX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int BOUNDING_BOX_NV = 0x908D;

		/// <summary>
		/// [GL] Value of GL_TRANSLATE_X_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int TRANSLATE_X_NV = 0x908E;

		/// <summary>
		/// [GL] Value of GL_TRANSLATE_Y_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int TRANSLATE_Y_NV = 0x908F;

		/// <summary>
		/// [GL] Value of GL_TRANSLATE_2D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int TRANSLATE_2D_NV = 0x9090;

		/// <summary>
		/// [GL] Value of GL_TRANSLATE_3D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int TRANSLATE_3D_NV = 0x9091;

		/// <summary>
		/// [GL] Value of GL_AFFINE_2D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int AFFINE_2D_NV = 0x9092;

		/// <summary>
		/// [GL] Value of GL_AFFINE_3D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int AFFINE_3D_NV = 0x9094;

		/// <summary>
		/// [GL] Value of GL_TRANSPOSE_AFFINE_2D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int TRANSPOSE_AFFINE_2D_NV = 0x9096;

		/// <summary>
		/// [GL] Value of GL_TRANSPOSE_AFFINE_3D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int TRANSPOSE_AFFINE_3D_NV = 0x9098;

		/// <summary>
		/// [GL] Value of GL_UTF8_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int UTF8_NV = 0x909A;

		/// <summary>
		/// [GL] Value of GL_UTF16_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int UTF16_NV = 0x909B;

		/// <summary>
		/// [GL] Value of GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;

		/// <summary>
		/// [GL] Value of GL_PATH_COMMAND_COUNT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_COMMAND_COUNT_NV = 0x909D;

		/// <summary>
		/// [GL] Value of GL_PATH_COORD_COUNT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_COORD_COUNT_NV = 0x909E;

		/// <summary>
		/// [GL] Value of GL_PATH_DASH_ARRAY_COUNT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_DASH_ARRAY_COUNT_NV = 0x909F;

		/// <summary>
		/// [GL] Value of GL_PATH_COMPUTED_LENGTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_COMPUTED_LENGTH_NV = 0x90A0;

		/// <summary>
		/// [GL] Value of GL_PATH_FILL_BOUNDING_BOX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_FILL_BOUNDING_BOX_NV = 0x90A1;

		/// <summary>
		/// [GL] Value of GL_PATH_STROKE_BOUNDING_BOX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;

		/// <summary>
		/// [GL] Value of GL_SQUARE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int SQUARE_NV = 0x90A3;

		/// <summary>
		/// [GL] Value of GL_ROUND_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ROUND_NV = 0x90A4;

		/// <summary>
		/// [GL] Value of GL_TRIANGULAR_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int TRIANGULAR_NV = 0x90A5;

		/// <summary>
		/// [GL] Value of GL_BEVEL_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int BEVEL_NV = 0x90A6;

		/// <summary>
		/// [GL] Value of GL_MITER_REVERT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int MITER_REVERT_NV = 0x90A7;

		/// <summary>
		/// [GL] Value of GL_MITER_TRUNCATE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int MITER_TRUNCATE_NV = 0x90A8;

		/// <summary>
		/// [GL] Value of GL_SKIP_MISSING_GLYPH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int SKIP_MISSING_GLYPH_NV = 0x90A9;

		/// <summary>
		/// [GL] Value of GL_USE_MISSING_GLYPH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int USE_MISSING_GLYPH_NV = 0x90AA;

		/// <summary>
		/// [GL] Value of GL_PATH_ERROR_POSITION_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_ERROR_POSITION_NV = 0x90AB;

		/// <summary>
		/// [GL] Value of GL_ACCUM_ADJACENT_PAIRS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ACCUM_ADJACENT_PAIRS_NV = 0x90AD;

		/// <summary>
		/// [GL] Value of GL_ADJACENT_PAIRS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ADJACENT_PAIRS_NV = 0x90AE;

		/// <summary>
		/// [GL] Value of GL_FIRST_TO_REST_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int FIRST_TO_REST_NV = 0x90AF;

		/// <summary>
		/// [GL] Value of GL_PATH_GEN_MODE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_GEN_MODE_NV = 0x90B0;

		/// <summary>
		/// [GL] Value of GL_PATH_GEN_COEFF_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_GEN_COEFF_NV = 0x90B1;

		/// <summary>
		/// [GL] Value of GL_PATH_GEN_COMPONENTS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_GEN_COMPONENTS_NV = 0x90B3;

		/// <summary>
		/// [GL] Value of GL_PATH_STENCIL_FUNC_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STENCIL_FUNC_NV = 0x90B7;

		/// <summary>
		/// [GL] Value of GL_PATH_STENCIL_REF_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STENCIL_REF_NV = 0x90B8;

		/// <summary>
		/// [GL] Value of GL_PATH_STENCIL_VALUE_MASK_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STENCIL_VALUE_MASK_NV = 0x90B9;

		/// <summary>
		/// [GL] Value of GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;

		/// <summary>
		/// [GL] Value of GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;

		/// <summary>
		/// [GL] Value of GL_PATH_COVER_DEPTH_FUNC_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_COVER_DEPTH_FUNC_NV = 0x90BF;

		/// <summary>
		/// [GL] Value of GL_PATH_DASH_OFFSET_RESET_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_DASH_OFFSET_RESET_NV = 0x90B4;

		/// <summary>
		/// [GL] Value of GL_MOVE_TO_RESETS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int MOVE_TO_RESETS_NV = 0x90B5;

		/// <summary>
		/// [GL] Value of GL_MOVE_TO_CONTINUES_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int MOVE_TO_CONTINUES_NV = 0x90B6;

		/// <summary>
		/// [GL] Value of GL_CLOSE_PATH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int CLOSE_PATH_NV = 0x00;

		/// <summary>
		/// [GL] Value of GL_MOVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int MOVE_TO_NV = 0x02;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_MOVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_MOVE_TO_NV = 0x03;

		/// <summary>
		/// [GL] Value of GL_LINE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int LINE_TO_NV = 0x04;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_LINE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_LINE_TO_NV = 0x05;

		/// <summary>
		/// [GL] Value of GL_HORIZONTAL_LINE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int HORIZONTAL_LINE_TO_NV = 0x06;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_HORIZONTAL_LINE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;

		/// <summary>
		/// [GL] Value of GL_VERTICAL_LINE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int VERTICAL_LINE_TO_NV = 0x08;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_VERTICAL_LINE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_VERTICAL_LINE_TO_NV = 0x09;

		/// <summary>
		/// [GL] Value of GL_QUADRATIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int QUADRATIC_CURVE_TO_NV = 0x0A;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_QUADRATIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;

		/// <summary>
		/// [GL] Value of GL_CUBIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int CUBIC_CURVE_TO_NV = 0x0C;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_CUBIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;

		/// <summary>
		/// [GL] Value of GL_SMOOTH_QUADRATIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;

		/// <summary>
		/// [GL] Value of GL_SMOOTH_CUBIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int SMOOTH_CUBIC_CURVE_TO_NV = 0x10;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;

		/// <summary>
		/// [GL] Value of GL_SMALL_CCW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int SMALL_CCW_ARC_TO_NV = 0x12;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_SMALL_CCW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;

		/// <summary>
		/// [GL] Value of GL_SMALL_CW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int SMALL_CW_ARC_TO_NV = 0x14;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_SMALL_CW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;

		/// <summary>
		/// [GL] Value of GL_LARGE_CCW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int LARGE_CCW_ARC_TO_NV = 0x16;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_LARGE_CCW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;

		/// <summary>
		/// [GL] Value of GL_LARGE_CW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int LARGE_CW_ARC_TO_NV = 0x18;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_LARGE_CW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;

		/// <summary>
		/// [GL] Value of GL_RESTART_PATH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RESTART_PATH_NV = 0xF0;

		/// <summary>
		/// [GL] Value of GL_DUP_FIRST_CUBIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;

		/// <summary>
		/// [GL] Value of GL_DUP_LAST_CUBIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;

		/// <summary>
		/// [GL] Value of GL_RECT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RECT_NV = 0xF6;

		/// <summary>
		/// [GL] Value of GL_CIRCULAR_CCW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int CIRCULAR_CCW_ARC_TO_NV = 0xF8;

		/// <summary>
		/// [GL] Value of GL_CIRCULAR_CW_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int CIRCULAR_CW_ARC_TO_NV = 0xFA;

		/// <summary>
		/// [GL] Value of GL_CIRCULAR_TANGENT_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;

		/// <summary>
		/// [GL] Value of GL_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ARC_TO_NV = 0xFE;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_ARC_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_ARC_TO_NV = 0xFF;

		/// <summary>
		/// [GL] Value of GL_BOLD_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int BOLD_BIT_NV = 0x01;

		/// <summary>
		/// [GL] Value of GL_ITALIC_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int ITALIC_BIT_NV = 0x02;

		/// <summary>
		/// [GL] Value of GL_GLYPH_WIDTH_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_WIDTH_BIT_NV = 0x01;

		/// <summary>
		/// [GL] Value of GL_GLYPH_HEIGHT_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_HEIGHT_BIT_NV = 0x02;

		/// <summary>
		/// [GL] Value of GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;

		/// <summary>
		/// [GL] Value of GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;

		/// <summary>
		/// [GL] Value of GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;

		/// <summary>
		/// [GL] Value of GL_GLYPH_VERTICAL_BEARING_X_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;

		/// <summary>
		/// [GL] Value of GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;

		/// <summary>
		/// [GL] Value of GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;

		/// <summary>
		/// [GL] Value of GL_GLYPH_HAS_KERNING_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const int GLYPH_HAS_KERNING_BIT_NV = 0x100;

		/// <summary>
		/// [GL] Value of GL_FONT_X_MIN_BOUNDS_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;

		/// <summary>
		/// [GL] Value of GL_FONT_Y_MIN_BOUNDS_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;

		/// <summary>
		/// [GL] Value of GL_FONT_X_MAX_BOUNDS_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;

		/// <summary>
		/// [GL] Value of GL_FONT_Y_MAX_BOUNDS_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;

		/// <summary>
		/// [GL] Value of GL_FONT_UNITS_PER_EM_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_UNITS_PER_EM_BIT_NV = 0x00100000;

		/// <summary>
		/// [GL] Value of GL_FONT_ASCENDER_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_ASCENDER_BIT_NV = 0x00200000;

		/// <summary>
		/// [GL] Value of GL_FONT_DESCENDER_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_DESCENDER_BIT_NV = 0x00400000;

		/// <summary>
		/// [GL] Value of GL_FONT_HEIGHT_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_HEIGHT_BIT_NV = 0x00800000;

		/// <summary>
		/// [GL] Value of GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;

		/// <summary>
		/// [GL] Value of GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;

		/// <summary>
		/// [GL] Value of GL_FONT_UNDERLINE_POSITION_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;

		/// <summary>
		/// [GL] Value of GL_FONT_UNDERLINE_THICKNESS_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;

		/// <summary>
		/// [GL] Value of GL_FONT_HAS_KERNING_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_HAS_KERNING_BIT_NV = 0x10000000;

		/// <summary>
		/// [GL] Value of GL_ROUNDED_RECT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ROUNDED_RECT_NV = 0xE8;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_ROUNDED_RECT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_ROUNDED_RECT_NV = 0xE9;

		/// <summary>
		/// [GL] Value of GL_ROUNDED_RECT2_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ROUNDED_RECT2_NV = 0xEA;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_ROUNDED_RECT2_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_ROUNDED_RECT2_NV = 0xEB;

		/// <summary>
		/// [GL] Value of GL_ROUNDED_RECT4_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ROUNDED_RECT4_NV = 0xEC;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_ROUNDED_RECT4_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_ROUNDED_RECT4_NV = 0xED;

		/// <summary>
		/// [GL] Value of GL_ROUNDED_RECT8_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int ROUNDED_RECT8_NV = 0xEE;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_ROUNDED_RECT8_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_ROUNDED_RECT8_NV = 0xEF;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_RECT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_RECT_NV = 0xF7;

		/// <summary>
		/// [GL] Value of GL_FONT_GLYPHS_AVAILABLE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int FONT_GLYPHS_AVAILABLE_NV = 0x9368;

		/// <summary>
		/// [GL] Value of GL_FONT_TARGET_UNAVAILABLE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int FONT_TARGET_UNAVAILABLE_NV = 0x9369;

		/// <summary>
		/// [GL] Value of GL_FONT_UNAVAILABLE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int FONT_UNAVAILABLE_NV = 0x936A;

		/// <summary>
		/// [GL] Value of GL_FONT_UNINTELLIGIBLE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int FONT_UNINTELLIGIBLE_NV = 0x936B;

		/// <summary>
		/// [GL] Value of GL_CONIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int CONIC_CURVE_TO_NV = 0x1A;

		/// <summary>
		/// [GL] Value of GL_RELATIVE_CONIC_CURVE_TO_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int RELATIVE_CONIC_CURVE_TO_NV = 0x1B;

		/// <summary>
		/// [GL] Value of GL_FONT_NUM_GLYPH_INDICES_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		[Log(BitmaskName = "GL")]
		public const uint FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;

		/// <summary>
		/// [GL] Value of GL_STANDARD_FONT_FORMAT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int STANDARD_FONT_FORMAT_NV = 0x936C;

		/// <summary>
		/// [GL] Value of GL_PATH_FOG_GEN_MODE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_FOG_GEN_MODE_NV = 0x90AC;

		/// <summary>
		/// [GL] Value of GL_PATH_GEN_COLOR_FORMAT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_GEN_COLOR_FORMAT_NV = 0x90B2;

		/// <summary>
		/// [GL] Value of GL_PATH_PROJECTION_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_PROJECTION_NV = 0x1701;

		/// <summary>
		/// [GL] Value of GL_PATH_MODELVIEW_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_MODELVIEW_NV = 0x1700;

		/// <summary>
		/// [GL] Value of GL_PATH_MODELVIEW_STACK_DEPTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;

		/// <summary>
		/// [GL] Value of GL_PATH_MODELVIEW_MATRIX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_MODELVIEW_MATRIX_NV = 0x0BA6;

		/// <summary>
		/// [GL] Value of GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;

		/// <summary>
		/// [GL] Value of GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;

		/// <summary>
		/// [GL] Value of GL_PATH_PROJECTION_STACK_DEPTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;

		/// <summary>
		/// [GL] Value of GL_PATH_PROJECTION_MATRIX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_PROJECTION_MATRIX_NV = 0x0BA7;

		/// <summary>
		/// [GL] Value of GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;

		/// <summary>
		/// [GL] Value of GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;

		/// <summary>
		/// [GL] Value of GL_FRAGMENT_INPUT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public const int FRAGMENT_INPUT_NV = 0x936D;

		/// <summary>
		/// [GL] glGenPathsNV: Binding for glGenPathsNV.
		/// </summary>
		/// <param name="range">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static uint GenPathsNV(int range)
		{
			uint retValue;

			Debug.Assert(Delegates.pglGenPathsNV != null, "pglGenPathsNV not implemented");
			retValue = Delegates.pglGenPathsNV(range);
			LogCommand("glGenPathsNV", retValue, range			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glDeletePathsNV: Binding for glDeletePathsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="range">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void DeletePathsNV(uint path, int range)
		{
			Debug.Assert(Delegates.pglDeletePathsNV != null, "pglDeletePathsNV not implemented");
			Delegates.pglDeletePathsNV(path, range);
			LogCommand("glDeletePathsNV", null, path, range			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glIsPathNV: Binding for glIsPathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static bool IsPathNV(uint path)
		{
			bool retValue;

			Debug.Assert(Delegates.pglIsPathNV != null, "pglIsPathNV not implemented");
			retValue = Delegates.pglIsPathNV(path);
			LogCommand("glIsPathNV", retValue, path			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glPathCommandsNV: Binding for glPathCommandsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numCommands">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="commands">
		/// A <see cref="T:byte[]"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, int coordType, object coords)
		{
			GCHandle pin_coords = GCHandle.Alloc(coords, GCHandleType.Pinned);
			try {
				PathCommandsNV(path, numCommands, commands, numCoords, coordType, pin_coords.AddrOfPinnedObject());
			} finally {
				pin_coords.Free();
			}
		}

		/// <summary>
		/// [GL] glPathCommandsNV: Binding for glPathCommandsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="commands">
		/// A <see cref="T:byte[]"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathCommandsNV(uint path, byte[] commands, int numCoords, int coordType, IntPtr coords)
		{
			unsafe {
				fixed (byte* p_commands = commands)
				{
					Debug.Assert(Delegates.pglPathCommandsNV != null, "pglPathCommandsNV not implemented");
					Delegates.pglPathCommandsNV(path, commands.Length, p_commands, numCoords, coordType, coords);
					LogCommand("glPathCommandsNV", null, path, commands.Length, commands, numCoords, coordType, coords					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathCoordsNV: Binding for glPathCoordsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathCoordsNV(uint path, int numCoords, int coordType, IntPtr coords)
		{
			Debug.Assert(Delegates.pglPathCoordsNV != null, "pglPathCoordsNV not implemented");
			Delegates.pglPathCoordsNV(path, numCoords, coordType, coords);
			LogCommand("glPathCoordsNV", null, path, numCoords, coordType, coords			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathCoordsNV: Binding for glPathCoordsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathCoordsNV(uint path, int numCoords, int coordType, object coords)
		{
			GCHandle pin_coords = GCHandle.Alloc(coords, GCHandleType.Pinned);
			try {
				PathCoordsNV(path, numCoords, coordType, pin_coords.AddrOfPinnedObject());
			} finally {
				pin_coords.Free();
			}
		}

		/// <summary>
		/// [GL] glPathSubCommandsNV: Binding for glPathSubCommandsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="commandStart">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="commandsToDelete">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numCommands">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="commands">
		/// A <see cref="T:byte[]"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, int coordType, object coords)
		{
			GCHandle pin_coords = GCHandle.Alloc(coords, GCHandleType.Pinned);
			try {
				PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, pin_coords.AddrOfPinnedObject());
			} finally {
				pin_coords.Free();
			}
		}

		/// <summary>
		/// [GL] glPathSubCommandsNV: Binding for glPathSubCommandsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="commandStart">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="commandsToDelete">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="commands">
		/// A <see cref="T:byte[]"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, int coordType, IntPtr coords)
		{
			unsafe {
				fixed (byte* p_commands = commands)
				{
					Debug.Assert(Delegates.pglPathSubCommandsNV != null, "pglPathSubCommandsNV not implemented");
					Delegates.pglPathSubCommandsNV(path, commandStart, commandsToDelete, commands.Length, p_commands, numCoords, coordType, coords);
					LogCommand("glPathSubCommandsNV", null, path, commandStart, commandsToDelete, commands.Length, commands, numCoords, coordType, coords					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathSubCoordsNV: Binding for glPathSubCoordsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coordStart">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathSubCoordNV(uint path, int coordStart, int numCoords, int coordType, IntPtr coords)
		{
			Debug.Assert(Delegates.pglPathSubCoordsNV != null, "pglPathSubCoordsNV not implemented");
			Delegates.pglPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
			LogCommand("glPathSubCoordsNV", null, path, coordStart, numCoords, coordType, coords			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathSubCoordsNV: Binding for glPathSubCoordsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coordStart">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numCoords">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coordType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathSubCoordNV(uint path, int coordStart, int numCoords, int coordType, object coords)
		{
			GCHandle pin_coords = GCHandle.Alloc(coords, GCHandleType.Pinned);
			try {
				PathSubCoordNV(path, coordStart, numCoords, coordType, pin_coords.AddrOfPinnedObject());
			} finally {
				pin_coords.Free();
			}
		}

		/// <summary>
		/// [GL] glPathStringNV: Binding for glPathStringNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="format">
		/// A <see cref="T:PathStringFormat"/>.
		/// </param>
		/// <param name="length">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathString">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathStringNV(uint path, PathStringFormat format, int length, IntPtr pathString)
		{
			Debug.Assert(Delegates.pglPathStringNV != null, "pglPathStringNV not implemented");
			Delegates.pglPathStringNV(path, (int)format, length, pathString);
			LogCommand("glPathStringNV", null, path, format, length, pathString			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathStringNV: Binding for glPathStringNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="format">
		/// A <see cref="T:PathStringFormat"/>.
		/// </param>
		/// <param name="length">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathString">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathStringNV(uint path, PathStringFormat format, int length, object pathString)
		{
			GCHandle pin_pathString = GCHandle.Alloc(pathString, GCHandleType.Pinned);
			try {
				PathStringNV(path, format, length, pin_pathString.AddrOfPinnedObject());
			} finally {
				pin_pathString.Free();
			}
		}

		/// <summary>
		/// [GL] glPathGlyphsNV: Binding for glPathGlyphsNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:PathFontTarget"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="charcodes">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="handleMissingGlyphs">
		/// A <see cref="T:PathHandleMissingGlyphs"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, IntPtr charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
		{
			Debug.Assert(Delegates.pglPathGlyphsNV != null, "pglPathGlyphsNV not implemented");
			Delegates.pglPathGlyphsNV(firstPathName, (int)fontTarget, fontName, (uint)fontStyle, numGlyphs, (int)type, charcodes, (int)handleMissingGlyphs, pathParameterTemplate, emScale);
			LogCommand("glPathGlyphsNV", null, firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathGlyphsNV: Binding for glPathGlyphsNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:PathFontTarget"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="charcodes">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="handleMissingGlyphs">
		/// A <see cref="T:PathHandleMissingGlyphs"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, object fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, object charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
		{
			GCHandle pin_fontName = GCHandle.Alloc(fontName, GCHandleType.Pinned);
			GCHandle pin_charcodes = GCHandle.Alloc(charcodes, GCHandleType.Pinned);
			try {
				PathGlyphsNV(firstPathName, fontTarget, pin_fontName.AddrOfPinnedObject(), fontStyle, numGlyphs, type, pin_charcodes.AddrOfPinnedObject(), handleMissingGlyphs, pathParameterTemplate, emScale);
			} finally {
				pin_fontName.Free();
				pin_charcodes.Free();
			}
		}

		/// <summary>
		/// [GL] glPathGlyphRangeNV: Binding for glPathGlyphRangeNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:PathFontTarget"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="firstGlyph">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="handleMissingGlyphs">
		/// A <see cref="T:PathHandleMissingGlyphs"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
		{
			Debug.Assert(Delegates.pglPathGlyphRangeNV != null, "pglPathGlyphRangeNV not implemented");
			Delegates.pglPathGlyphRangeNV(firstPathName, (int)fontTarget, fontName, (uint)fontStyle, firstGlyph, numGlyphs, (int)handleMissingGlyphs, pathParameterTemplate, emScale);
			LogCommand("glPathGlyphRangeNV", null, firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathGlyphRangeNV: Binding for glPathGlyphRangeNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:PathFontTarget"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="firstGlyph">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="handleMissingGlyphs">
		/// A <see cref="T:PathHandleMissingGlyphs"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, object fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
		{
			GCHandle pin_fontName = GCHandle.Alloc(fontName, GCHandleType.Pinned);
			try {
				PathGlyphRangeNV(firstPathName, fontTarget, pin_fontName.AddrOfPinnedObject(), fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
			} finally {
				pin_fontName.Free();
			}
		}

		/// <summary>
		/// [GL] glWeightPathsNV: Binding for glWeightPathsNV.
		/// </summary>
		/// <param name="resultPath">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="weights">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void WeightPathsNV(uint resultPath, uint[] paths, float[] weights)
		{
			unsafe {
				fixed (uint* p_paths = paths)
				fixed (float* p_weights = weights)
				{
					Debug.Assert(Delegates.pglWeightPathsNV != null, "pglWeightPathsNV not implemented");
					Delegates.pglWeightPathsNV(resultPath, paths.Length, p_paths, p_weights);
					LogCommand("glWeightPathsNV", null, resultPath, paths.Length, paths, weights					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glCopyPathNV: Binding for glCopyPathNV.
		/// </summary>
		/// <param name="resultPath">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="srcPath">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void CopyPathNV(uint resultPath, uint srcPath)
		{
			Debug.Assert(Delegates.pglCopyPathNV != null, "pglCopyPathNV not implemented");
			Delegates.pglCopyPathNV(resultPath, srcPath);
			LogCommand("glCopyPathNV", null, resultPath, srcPath			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glInterpolatePathsNV: Binding for glInterpolatePathsNV.
		/// </summary>
		/// <param name="resultPath">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pathA">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pathB">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="weight">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void InterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight)
		{
			Debug.Assert(Delegates.pglInterpolatePathsNV != null, "pglInterpolatePathsNV not implemented");
			Delegates.pglInterpolatePathsNV(resultPath, pathA, pathB, weight);
			LogCommand("glInterpolatePathsNV", null, resultPath, pathA, pathB, weight			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glTransformPathNV: Binding for glTransformPathNV.
		/// </summary>
		/// <param name="resultPath">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="srcPath">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues)
		{
			unsafe {
				fixed (float* p_transformValues = transformValues)
				{
					Debug.Assert(Delegates.pglTransformPathNV != null, "pglTransformPathNV not implemented");
					Delegates.pglTransformPathNV(resultPath, srcPath, (int)transformType, p_transformValues);
					LogCommand("glTransformPathNV", null, resultPath, srcPath, transformType, transformValues					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathParameterivNV: Binding for glPathParameterivNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathParameter"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathParameterNV(uint path, PathParameter pname, int[] value)
		{
			unsafe {
				fixed (int* p_value = value)
				{
					Debug.Assert(Delegates.pglPathParameterivNV != null, "pglPathParameterivNV not implemented");
					Delegates.pglPathParameterivNV(path, (int)pname, p_value);
					LogCommand("glPathParameterivNV", null, path, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathParameteriNV: Binding for glPathParameteriNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathParameter"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathParameterNV(uint path, PathParameter pname, int value)
		{
			Debug.Assert(Delegates.pglPathParameteriNV != null, "pglPathParameteriNV not implemented");
			Delegates.pglPathParameteriNV(path, (int)pname, value);
			LogCommand("glPathParameteriNV", null, path, pname, value			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathParameterfvNV: Binding for glPathParameterfvNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathParameter"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathParameterNV(uint path, PathParameter pname, float[] value)
		{
			unsafe {
				fixed (float* p_value = value)
				{
					Debug.Assert(Delegates.pglPathParameterfvNV != null, "pglPathParameterfvNV not implemented");
					Delegates.pglPathParameterfvNV(path, (int)pname, p_value);
					LogCommand("glPathParameterfvNV", null, path, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathParameterfNV: Binding for glPathParameterfNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathParameter"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathParameterNV(uint path, PathParameter pname, float value)
		{
			Debug.Assert(Delegates.pglPathParameterfNV != null, "pglPathParameterfNV not implemented");
			Delegates.pglPathParameterfNV(path, (int)pname, value);
			LogCommand("glPathParameterfNV", null, path, pname, value			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathDashArrayNV: Binding for glPathDashArrayNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="dashArray">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathDashArrayNV(uint path, float[] dashArray)
		{
			unsafe {
				fixed (float* p_dashArray = dashArray)
				{
					Debug.Assert(Delegates.pglPathDashArrayNV != null, "pglPathDashArrayNV not implemented");
					Delegates.pglPathDashArrayNV(path, dashArray.Length, p_dashArray);
					LogCommand("glPathDashArrayNV", null, path, dashArray.Length, dashArray					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathStencilFuncNV: Binding for glPathStencilFuncNV.
		/// </summary>
		/// <param name="func">
		/// A <see cref="T:StencilFunction"/>.
		/// </param>
		/// <param name="ref">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathStencilFuncNV(StencilFunction func, int @ref, uint mask)
		{
			Debug.Assert(Delegates.pglPathStencilFuncNV != null, "pglPathStencilFuncNV not implemented");
			Delegates.pglPathStencilFuncNV((int)func, @ref, mask);
			LogCommand("glPathStencilFuncNV", null, func, @ref, mask			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathStencilDepthOffsetNV: Binding for glPathStencilDepthOffsetNV.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="units">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathStencilDepthOffsetNV(float factor, float units)
		{
			Debug.Assert(Delegates.pglPathStencilDepthOffsetNV != null, "pglPathStencilDepthOffsetNV not implemented");
			Delegates.pglPathStencilDepthOffsetNV(factor, units);
			LogCommand("glPathStencilDepthOffsetNV", null, factor, units			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilFillPathNV: Binding for glStencilFillPathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fillMode">
		/// A <see cref="T:PathFillMode"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilFillPathNV(uint path, PathFillMode fillMode, uint mask)
		{
			Debug.Assert(Delegates.pglStencilFillPathNV != null, "pglStencilFillPathNV not implemented");
			Delegates.pglStencilFillPathNV(path, (int)fillMode, mask);
			LogCommand("glStencilFillPathNV", null, path, fillMode, mask			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilStrokePathNV: Binding for glStencilStrokePathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="reference">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilStrokePathNV(uint path, int reference, uint mask)
		{
			Debug.Assert(Delegates.pglStencilStrokePathNV != null, "pglStencilStrokePathNV not implemented");
			Delegates.pglStencilStrokePathNV(path, reference, mask);
			LogCommand("glStencilStrokePathNV", null, path, reference, mask			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilFillPathInstancedNV: Binding for glStencilFillPathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fillMode">
		/// A <see cref="T:PathFillMode"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
		{
			unsafe {
				fixed (float* p_transformValues = transformValues)
				{
					Debug.Assert(Delegates.pglStencilFillPathInstancedNV != null, "pglStencilFillPathInstancedNV not implemented");
					Delegates.pglStencilFillPathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, (int)fillMode, mask, (int)transformType, p_transformValues);
					LogCommand("glStencilFillPathInstancedNV", null, numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilFillPathInstancedNV: Binding for glStencilFillPathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fillMode">
		/// A <see cref="T:PathFillMode"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				StencilFillPathInstancedNV(numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, fillMode, mask, transformType, transformValues);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glStencilStrokePathInstancedNV: Binding for glStencilStrokePathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="reference">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
		{
			unsafe {
				fixed (float* p_transformValues = transformValues)
				{
					Debug.Assert(Delegates.pglStencilStrokePathInstancedNV != null, "pglStencilStrokePathInstancedNV not implemented");
					Delegates.pglStencilStrokePathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, reference, mask, (int)transformType, p_transformValues);
					LogCommand("glStencilStrokePathInstancedNV", null, numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilStrokePathInstancedNV: Binding for glStencilStrokePathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="reference">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				StencilStrokePathInstancedNV(numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, reference, mask, transformType, transformValues);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glPathCoverDepthFuncNV: Binding for glPathCoverDepthFuncNV.
		/// </summary>
		/// <param name="func">
		/// A <see cref="T:DepthFunction"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void PathCoverDepthFuncNV(DepthFunction func)
		{
			Debug.Assert(Delegates.pglPathCoverDepthFuncNV != null, "pglPathCoverDepthFuncNV not implemented");
			Delegates.pglPathCoverDepthFuncNV((int)func);
			LogCommand("glPathCoverDepthFuncNV", null, func			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glCoverFillPathNV: Binding for glCoverFillPathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:PathCoverMode"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void CoverFillPathNV(uint path, PathCoverMode coverMode)
		{
			Debug.Assert(Delegates.pglCoverFillPathNV != null, "pglCoverFillPathNV not implemented");
			Delegates.pglCoverFillPathNV(path, (int)coverMode);
			LogCommand("glCoverFillPathNV", null, path, coverMode			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glCoverStrokePathNV: Binding for glCoverStrokePathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:PathCoverMode"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void CoverStrokePathNV(uint path, PathCoverMode coverMode)
		{
			Debug.Assert(Delegates.pglCoverStrokePathNV != null, "pglCoverStrokePathNV not implemented");
			Delegates.pglCoverStrokePathNV(path, (int)coverMode);
			LogCommand("glCoverStrokePathNV", null, path, coverMode			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glCoverFillPathInstancedNV: Binding for glCoverFillPathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:PathCoverMode"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
		{
			unsafe {
				fixed (float* p_transformValues = transformValues)
				{
					Debug.Assert(Delegates.pglCoverFillPathInstancedNV != null, "pglCoverFillPathInstancedNV not implemented");
					Delegates.pglCoverFillPathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, (int)coverMode, (int)transformType, p_transformValues);
					LogCommand("glCoverFillPathInstancedNV", null, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glCoverFillPathInstancedNV: Binding for glCoverFillPathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:PathCoverMode"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				CoverFillPathInstancedNV(numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, coverMode, transformType, transformValues);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glCoverStrokePathInstancedNV: Binding for glCoverStrokePathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:PathCoverMode"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
		{
			unsafe {
				fixed (float* p_transformValues = transformValues)
				{
					Debug.Assert(Delegates.pglCoverStrokePathInstancedNV != null, "pglCoverStrokePathInstancedNV not implemented");
					Delegates.pglCoverStrokePathInstancedNV(numPaths, (int)pathNameType, paths, pathBase, (int)coverMode, (int)transformType, p_transformValues);
					LogCommand("glCoverStrokePathInstancedNV", null, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glCoverStrokePathInstancedNV: Binding for glCoverStrokePathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:PathCoverMode"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, object paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				CoverStrokePathInstancedNV(numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, coverMode, transformType, transformValues);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glGetPathParameterivNV: Binding for glGetPathParameterivNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathParameter"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathParameterNV(uint path, PathParameter pname, [Out] int[] value)
		{
			Debug.Assert(value.Length >= 4);
			unsafe {
				fixed (int* p_value = value)
				{
					Debug.Assert(Delegates.pglGetPathParameterivNV != null, "pglGetPathParameterivNV not implemented");
					Delegates.pglGetPathParameterivNV(path, (int)pname, p_value);
					LogCommand("glGetPathParameterivNV", null, path, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathParameterfvNV: Binding for glGetPathParameterfvNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathParameter"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathParameterNV(uint path, PathParameter pname, [Out] float[] value)
		{
			Debug.Assert(value.Length >= 4);
			unsafe {
				fixed (float* p_value = value)
				{
					Debug.Assert(Delegates.pglGetPathParameterfvNV != null, "pglGetPathParameterfvNV not implemented");
					Delegates.pglGetPathParameterfvNV(path, (int)pname, p_value);
					LogCommand("glGetPathParameterfvNV", null, path, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathCommandsNV: Binding for glGetPathCommandsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="commands">
		/// A <see cref="T:byte[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathCommandsNV(uint path, [Out] byte[] commands)
		{
			unsafe {
				fixed (byte* p_commands = commands)
				{
					Debug.Assert(Delegates.pglGetPathCommandsNV != null, "pglGetPathCommandsNV not implemented");
					Delegates.pglGetPathCommandsNV(path, p_commands);
					LogCommand("glGetPathCommandsNV", null, path, commands					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathCoordsNV: Binding for glGetPathCoordsNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coords">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathCoordsNV(uint path, [Out] float[] coords)
		{
			unsafe {
				fixed (float* p_coords = coords)
				{
					Debug.Assert(Delegates.pglGetPathCoordsNV != null, "pglGetPathCoordsNV not implemented");
					Delegates.pglGetPathCoordsNV(path, p_coords);
					LogCommand("glGetPathCoordsNV", null, path, coords					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathDashArrayNV: Binding for glGetPathDashArrayNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="dashArray">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathDashArrayNV(uint path, [Out] float[] dashArray)
		{
			unsafe {
				fixed (float* p_dashArray = dashArray)
				{
					Debug.Assert(Delegates.pglGetPathDashArrayNV != null, "pglGetPathDashArrayNV not implemented");
					Delegates.pglGetPathDashArrayNV(path, p_dashArray);
					LogCommand("glGetPathDashArrayNV", null, path, dashArray					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathMetricsNV: Binding for glGetPathMetricsNV.
		/// </summary>
		/// <param name="metricQueryMask">
		/// A <see cref="T:PathMetricMask"/>.
		/// </param>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="metrics">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, [Out] float[] metrics)
		{
			unsafe {
				fixed (float* p_metrics = metrics)
				{
					Debug.Assert(Delegates.pglGetPathMetricsNV != null, "pglGetPathMetricsNV not implemented");
					Delegates.pglGetPathMetricsNV((uint)metricQueryMask, numPaths, (int)pathNameType, paths, pathBase, stride, p_metrics);
					LogCommand("glGetPathMetricsNV", null, metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathMetricsNV: Binding for glGetPathMetricsNV.
		/// </summary>
		/// <param name="metricQueryMask">
		/// A <see cref="T:PathMetricMask"/>.
		/// </param>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="metrics">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, object paths, uint pathBase, int stride, [Out] float[] metrics)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, stride, metrics);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glGetPathMetricRangeNV: Binding for glGetPathMetricRangeNV.
		/// </summary>
		/// <param name="metricQueryMask">
		/// A <see cref="T:PathMetricMask"/>.
		/// </param>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="metrics">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, [Out] float[] metrics)
		{
			unsafe {
				fixed (float* p_metrics = metrics)
				{
					Debug.Assert(Delegates.pglGetPathMetricRangeNV != null, "pglGetPathMetricRangeNV not implemented");
					Delegates.pglGetPathMetricRangeNV((uint)metricQueryMask, firstPathName, numPaths, stride, p_metrics);
					LogCommand("glGetPathMetricRangeNV", null, metricQueryMask, firstPathName, numPaths, stride, metrics					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathSpacingNV: Binding for glGetPathSpacingNV.
		/// </summary>
		/// <param name="pathListMode">
		/// A <see cref="T:PathListMode"/>.
		/// </param>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="advanceScale">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="kerningScale">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="returnedSpacing">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, [Out] float[] returnedSpacing)
		{
			unsafe {
				fixed (float* p_returnedSpacing = returnedSpacing)
				{
					Debug.Assert(Delegates.pglGetPathSpacingNV != null, "pglGetPathSpacingNV not implemented");
					Delegates.pglGetPathSpacingNV((int)pathListMode, numPaths, (int)pathNameType, paths, pathBase, advanceScale, kerningScale, (int)transformType, p_returnedSpacing);
					LogCommand("glGetPathSpacingNV", null, pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathSpacingNV: Binding for glGetPathSpacingNV.
		/// </summary>
		/// <param name="pathListMode">
		/// A <see cref="T:PathListMode"/>.
		/// </param>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:PathElementType"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="advanceScale">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="kerningScale">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:PathTransformType"/>.
		/// </param>
		/// <param name="returnedSpacing">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, object paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, [Out] float[] returnedSpacing)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				GetPathSpacingNV(pathListMode, numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glIsPointInFillPathNV: Binding for glIsPointInFillPathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="x">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="y">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static bool IsPointInFillPathNV(uint path, uint mask, float x, float y)
		{
			bool retValue;

			Debug.Assert(Delegates.pglIsPointInFillPathNV != null, "pglIsPointInFillPathNV not implemented");
			retValue = Delegates.pglIsPointInFillPathNV(path, mask, x, y);
			LogCommand("glIsPointInFillPathNV", retValue, path, mask, x, y			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glIsPointInStrokePathNV: Binding for glIsPointInStrokePathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="x">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="y">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static bool IsPointInStrokePathNV(uint path, float x, float y)
		{
			bool retValue;

			Debug.Assert(Delegates.pglIsPointInStrokePathNV != null, "pglIsPointInStrokePathNV not implemented");
			retValue = Delegates.pglIsPointInStrokePathNV(path, x, y);
			LogCommand("glIsPointInStrokePathNV", retValue, path, x, y			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glGetPathLengthNV: Binding for glGetPathLengthNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="startSegment">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numSegments">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static float GetPathNV(uint path, int startSegment, int numSegments)
		{
			float retValue;

			Debug.Assert(Delegates.pglGetPathLengthNV != null, "pglGetPathLengthNV not implemented");
			retValue = Delegates.pglGetPathLengthNV(path, startSegment, numSegments);
			LogCommand("glGetPathLengthNV", retValue, path, startSegment, numSegments			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glPointAlongPathNV: Binding for glPointAlongPathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="startSegment">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numSegments">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="distance">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="x">
		/// A <see cref="T:float[]"/>.
		/// </param>
		/// <param name="y">
		/// A <see cref="T:float[]"/>.
		/// </param>
		/// <param name="tangentX">
		/// A <see cref="T:float[]"/>.
		/// </param>
		/// <param name="tangentY">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static bool PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float[] x, float[] y, float[] tangentX, float[] tangentY)
		{
			Debug.Assert(x.Length >= 1);
			Debug.Assert(y.Length >= 1);
			Debug.Assert(tangentX.Length >= 1);
			Debug.Assert(tangentY.Length >= 1);
			bool retValue;

			unsafe {
				fixed (float* p_x = x)
				fixed (float* p_y = y)
				fixed (float* p_tangentX = tangentX)
				fixed (float* p_tangentY = tangentY)
				{
					Debug.Assert(Delegates.pglPointAlongPathNV != null, "pglPointAlongPathNV not implemented");
					retValue = Delegates.pglPointAlongPathNV(path, startSegment, numSegments, distance, p_x, p_y, p_tangentX, p_tangentY);
					LogCommand("glPointAlongPathNV", retValue, path, startSegment, numSegments, distance, x, y, tangentX, tangentY					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glMatrixLoad3x2fNV: Binding for glMatrixLoad3x2fNV.
		/// </summary>
		/// <param name="matrixMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="m">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void MatrixLoad3x2NV(int matrixMode, float[] m)
		{
			unsafe {
				fixed (float* p_m = m)
				{
					Debug.Assert(Delegates.pglMatrixLoad3x2fNV != null, "pglMatrixLoad3x2fNV not implemented");
					Delegates.pglMatrixLoad3x2fNV(matrixMode, p_m);
					LogCommand("glMatrixLoad3x2fNV", null, matrixMode, m					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMatrixLoad3x3fNV: Binding for glMatrixLoad3x3fNV.
		/// </summary>
		/// <param name="matrixMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="m">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void MatrixLoad3NV(int matrixMode, float[] m)
		{
			unsafe {
				fixed (float* p_m = m)
				{
					Debug.Assert(Delegates.pglMatrixLoad3x3fNV != null, "pglMatrixLoad3x3fNV not implemented");
					Delegates.pglMatrixLoad3x3fNV(matrixMode, p_m);
					LogCommand("glMatrixLoad3x3fNV", null, matrixMode, m					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMatrixLoadTranspose3x3fNV: Binding for glMatrixLoadTranspose3x3fNV.
		/// </summary>
		/// <param name="matrixMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="m">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void MatrixLoadTransposeNV(int matrixMode, float[] m)
		{
			unsafe {
				fixed (float* p_m = m)
				{
					Debug.Assert(Delegates.pglMatrixLoadTranspose3x3fNV != null, "pglMatrixLoadTranspose3x3fNV not implemented");
					Delegates.pglMatrixLoadTranspose3x3fNV(matrixMode, p_m);
					LogCommand("glMatrixLoadTranspose3x3fNV", null, matrixMode, m					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMatrixMult3x2fNV: Binding for glMatrixMult3x2fNV.
		/// </summary>
		/// <param name="matrixMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="m">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void MatrixMult3x2NV(int matrixMode, float[] m)
		{
			unsafe {
				fixed (float* p_m = m)
				{
					Debug.Assert(Delegates.pglMatrixMult3x2fNV != null, "pglMatrixMult3x2fNV not implemented");
					Delegates.pglMatrixMult3x2fNV(matrixMode, p_m);
					LogCommand("glMatrixMult3x2fNV", null, matrixMode, m					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMatrixMult3x3fNV: Binding for glMatrixMult3x3fNV.
		/// </summary>
		/// <param name="matrixMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="m">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void MatrixMult3x3NV(int matrixMode, float[] m)
		{
			unsafe {
				fixed (float* p_m = m)
				{
					Debug.Assert(Delegates.pglMatrixMult3x3fNV != null, "pglMatrixMult3x3fNV not implemented");
					Delegates.pglMatrixMult3x3fNV(matrixMode, p_m);
					LogCommand("glMatrixMult3x3fNV", null, matrixMode, m					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMatrixMultTranspose3x3fNV: Binding for glMatrixMultTranspose3x3fNV.
		/// </summary>
		/// <param name="matrixMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="m">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void MatrixMultTransposeNV(int matrixMode, float[] m)
		{
			unsafe {
				fixed (float* p_m = m)
				{
					Debug.Assert(Delegates.pglMatrixMultTranspose3x3fNV != null, "pglMatrixMultTranspose3x3fNV not implemented");
					Delegates.pglMatrixMultTranspose3x3fNV(matrixMode, p_m);
					LogCommand("glMatrixMultTranspose3x3fNV", null, matrixMode, m					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilThenCoverFillPathNV: Binding for glStencilThenCoverFillPathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fillMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode)
		{
			Debug.Assert(Delegates.pglStencilThenCoverFillPathNV != null, "pglStencilThenCoverFillPathNV not implemented");
			Delegates.pglStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
			LogCommand("glStencilThenCoverFillPathNV", null, path, fillMode, mask, coverMode			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilThenCoverStrokePathNV: Binding for glStencilThenCoverStrokePathNV.
		/// </summary>
		/// <param name="path">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="reference">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode)
		{
			Debug.Assert(Delegates.pglStencilThenCoverStrokePathNV != null, "pglStencilThenCoverStrokePathNV not implemented");
			Delegates.pglStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
			LogCommand("glStencilThenCoverStrokePathNV", null, path, reference, mask, coverMode			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilThenCoverFillPathInstancedNV: Binding for glStencilThenCoverFillPathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fillMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float[] transformValues)
		{
			unsafe {
				fixed (float* p_transformValues = transformValues)
				{
					Debug.Assert(Delegates.pglStencilThenCoverFillPathInstancedNV != null, "pglStencilThenCoverFillPathInstancedNV not implemented");
					Delegates.pglStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, p_transformValues);
					LogCommand("glStencilThenCoverFillPathInstancedNV", null, numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilThenCoverFillPathInstancedNV: Binding for glStencilThenCoverFillPathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fillMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, object paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float[] transformValues)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, fillMode, mask, coverMode, transformType, transformValues);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glStencilThenCoverStrokePathInstancedNV: Binding for glStencilThenCoverStrokePathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="reference">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float[] transformValues)
		{
			unsafe {
				fixed (float* p_transformValues = transformValues)
				{
					Debug.Assert(Delegates.pglStencilThenCoverStrokePathInstancedNV != null, "pglStencilThenCoverStrokePathInstancedNV not implemented");
					Delegates.pglStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, p_transformValues);
					LogCommand("glStencilThenCoverStrokePathInstancedNV", null, numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glStencilThenCoverStrokePathInstancedNV: Binding for glStencilThenCoverStrokePathInstancedNV.
		/// </summary>
		/// <param name="numPaths">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathNameType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="paths">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="pathBase">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="reference">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="coverMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformType">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="transformValues">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void StencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, object paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float[] transformValues)
		{
			GCHandle pin_paths = GCHandle.Alloc(paths, GCHandleType.Pinned);
			try {
				StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, pin_paths.AddrOfPinnedObject(), pathBase, reference, mask, coverMode, transformType, transformValues);
			} finally {
				pin_paths.Free();
			}
		}

		/// <summary>
		/// [GL] glPathGlyphIndexRangeNV: Binding for glPathGlyphIndexRangeNV.
		/// </summary>
		/// <param name="fontTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="baseAndCount">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static int PathGlyphIndexRangeNV(int fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
		{
			int retValue;

			unsafe {
				fixed (uint* p_baseAndCount = baseAndCount)
				{
					Debug.Assert(Delegates.pglPathGlyphIndexRangeNV != null, "pglPathGlyphIndexRangeNV not implemented");
					retValue = Delegates.pglPathGlyphIndexRangeNV(fontTarget, fontName, (uint)fontStyle, pathParameterTemplate, emScale, p_baseAndCount);
					LogCommand("glPathGlyphIndexRangeNV", retValue, fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glPathGlyphIndexRangeNV: Binding for glPathGlyphIndexRangeNV.
		/// </summary>
		/// <param name="fontTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="baseAndCount">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static int PathGlyphIndexRangeNV(int fontTarget, object fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
		{
			GCHandle pin_fontName = GCHandle.Alloc(fontName, GCHandleType.Pinned);
			try {
				return (PathGlyphIndexRangeNV(fontTarget, pin_fontName.AddrOfPinnedObject(), fontStyle, pathParameterTemplate, emScale, baseAndCount));
			} finally {
				pin_fontName.Free();
			}
		}

		/// <summary>
		/// [GL] glPathGlyphIndexArrayNV: Binding for glPathGlyphIndexArrayNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="firstGlyphIndex">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static int PathGlyphIndexArrayNV(uint firstPathName, int fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
		{
			int retValue;

			Debug.Assert(Delegates.pglPathGlyphIndexArrayNV != null, "pglPathGlyphIndexArrayNV not implemented");
			retValue = Delegates.pglPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, (uint)fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
			LogCommand("glPathGlyphIndexArrayNV", retValue, firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glPathGlyphIndexArrayNV: Binding for glPathGlyphIndexArrayNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="fontName">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="fontStyle">
		/// A <see cref="T:PathFontStyle"/>.
		/// </param>
		/// <param name="firstGlyphIndex">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static int PathGlyphIndexArrayNV(uint firstPathName, int fontTarget, object fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
		{
			GCHandle pin_fontName = GCHandle.Alloc(fontName, GCHandleType.Pinned);
			try {
				return (PathGlyphIndexArrayNV(firstPathName, fontTarget, pin_fontName.AddrOfPinnedObject(), fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale));
			} finally {
				pin_fontName.Free();
			}
		}

		/// <summary>
		/// [GL] glPathMemoryGlyphIndexArrayNV: Binding for glPathMemoryGlyphIndexArrayNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="fontSize">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontData">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="faceIndex">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="firstGlyphIndex">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static int PathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
		{
			int retValue;

			Debug.Assert(Delegates.pglPathMemoryGlyphIndexArrayNV != null, "pglPathMemoryGlyphIndexArrayNV not implemented");
			retValue = Delegates.pglPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
			LogCommand("glPathMemoryGlyphIndexArrayNV", retValue, firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glPathMemoryGlyphIndexArrayNV: Binding for glPathMemoryGlyphIndexArrayNV.
		/// </summary>
		/// <param name="firstPathName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="fontSize">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="fontData">
		/// A <see cref="T:object"/>.
		/// </param>
		/// <param name="faceIndex">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="firstGlyphIndex">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="numGlyphs">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pathParameterTemplate">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="emScale">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static int PathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, object fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
		{
			GCHandle pin_fontData = GCHandle.Alloc(fontData, GCHandleType.Pinned);
			try {
				return (PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, pin_fontData.AddrOfPinnedObject(), faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale));
			} finally {
				pin_fontData.Free();
			}
		}

		/// <summary>
		/// [GL] glProgramPathFragmentInputGenNV: Binding for glProgramPathFragmentInputGenNV.
		/// </summary>
		/// <param name="program">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="location">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="genMode">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="components">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coeffs">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void ProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float[] coeffs)
		{
			unsafe {
				fixed (float* p_coeffs = coeffs)
				{
					Debug.Assert(Delegates.pglProgramPathFragmentInputGenNV != null, "pglProgramPathFragmentInputGenNV not implemented");
					Delegates.pglProgramPathFragmentInputGenNV(program, location, genMode, components, p_coeffs);
					LogCommand("glProgramPathFragmentInputGenNV", null, program, location, genMode, components, coeffs					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetProgramResourcefvNV: Binding for glGetProgramResourcefvNV.
		/// </summary>
		/// <param name="program">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="programInterface">
		/// A <see cref="T:ProgramInterface"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="propCount">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="props">
		/// A <see cref="T:int[]"/>.
		/// </param>
		/// <param name="bufSize">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="length">
		/// A <see cref="T:int[]"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
		public static void GetProgramResourceNV(uint program, ProgramInterface programInterface, uint index, int propCount, int[] props, int bufSize, [Out] int[] length, [Out] float[] @params)
		{
			unsafe {
				fixed (int* p_props = props)
				fixed (int* p_length = length)
				fixed (float* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetProgramResourcefvNV != null, "pglGetProgramResourcefvNV not implemented");
					Delegates.pglGetProgramResourcefvNV(program, (int)programInterface, index, propCount, p_props, bufSize, p_length, p_params);
					LogCommand("glGetProgramResourcefvNV", null, program, programInterface, index, propCount, props, bufSize, length, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathColorGenNV: Binding for glPathColorGenNV.
		/// </summary>
		/// <param name="color">
		/// A <see cref="T:PathColor"/>.
		/// </param>
		/// <param name="genMode">
		/// A <see cref="T:PathGenMode"/>.
		/// </param>
		/// <param name="colorFormat">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coeffs">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		public static void PathColorGenNV(PathColor color, PathGenMode genMode, int colorFormat, float[] coeffs)
		{
			unsafe {
				fixed (float* p_coeffs = coeffs)
				{
					Debug.Assert(Delegates.pglPathColorGenNV != null, "pglPathColorGenNV not implemented");
					Delegates.pglPathColorGenNV((int)color, (int)genMode, colorFormat, p_coeffs);
					LogCommand("glPathColorGenNV", null, color, genMode, colorFormat, coeffs					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathTexGenNV: Binding for glPathTexGenNV.
		/// </summary>
		/// <param name="texCoordSet">
		/// A <see cref="T:PathColor"/>.
		/// </param>
		/// <param name="genMode">
		/// A <see cref="T:PathGenMode"/>.
		/// </param>
		/// <param name="components">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="coeffs">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		public static void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs)
		{
			unsafe {
				fixed (float* p_coeffs = coeffs)
				{
					Debug.Assert(Delegates.pglPathTexGenNV != null, "pglPathTexGenNV not implemented");
					Delegates.pglPathTexGenNV((int)texCoordSet, (int)genMode, components, p_coeffs);
					LogCommand("glPathTexGenNV", null, texCoordSet, genMode, components, coeffs					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glPathFogGenNV: Binding for glPathFogGenNV.
		/// </summary>
		/// <param name="genMode">
		/// A <see cref="T:PathGenMode"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		public static void PathFogGenNV(PathGenMode genMode)
		{
			Debug.Assert(Delegates.pglPathFogGenNV != null, "pglPathFogGenNV not implemented");
			Delegates.pglPathFogGenNV((int)genMode);
			LogCommand("glPathFogGenNV", null, genMode			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathColorGenivNV: Binding for glGetPathColorGenivNV.
		/// </summary>
		/// <param name="color">
		/// A <see cref="T:PathColor"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathGenMode"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		public static void GetPathColorGenNV(PathColor color, PathGenMode pname, [Out] int[] value)
		{
			unsafe {
				fixed (int* p_value = value)
				{
					Debug.Assert(Delegates.pglGetPathColorGenivNV != null, "pglGetPathColorGenivNV not implemented");
					Delegates.pglGetPathColorGenivNV((int)color, (int)pname, p_value);
					LogCommand("glGetPathColorGenivNV", null, color, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathColorGenfvNV: Binding for glGetPathColorGenfvNV.
		/// </summary>
		/// <param name="color">
		/// A <see cref="T:PathColor"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathGenMode"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		public static void GetPathColorGenNV(PathColor color, PathGenMode pname, [Out] float[] value)
		{
			unsafe {
				fixed (float* p_value = value)
				{
					Debug.Assert(Delegates.pglGetPathColorGenfvNV != null, "pglGetPathColorGenfvNV not implemented");
					Delegates.pglGetPathColorGenfvNV((int)color, (int)pname, p_value);
					LogCommand("glGetPathColorGenfvNV", null, color, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathTexGenivNV: Binding for glGetPathTexGenivNV.
		/// </summary>
		/// <param name="texCoordSet">
		/// A <see cref="T:TextureUnit"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathGenMode"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		public static void GetPathTexGenNV(TextureUnit texCoordSet, PathGenMode pname, [Out] int[] value)
		{
			unsafe {
				fixed (int* p_value = value)
				{
					Debug.Assert(Delegates.pglGetPathTexGenivNV != null, "pglGetPathTexGenivNV not implemented");
					Delegates.pglGetPathTexGenivNV((int)texCoordSet, (int)pname, p_value);
					LogCommand("glGetPathTexGenivNV", null, texCoordSet, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetPathTexGenfvNV: Binding for glGetPathTexGenfvNV.
		/// </summary>
		/// <param name="texCoordSet">
		/// A <see cref="T:TextureUnit"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:PathGenMode"/>.
		/// </param>
		/// <param name="value">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
		public static void GetPathTexGenNV(TextureUnit texCoordSet, PathGenMode pname, [Out] float[] value)
		{
			unsafe {
				fixed (float* p_value = value)
				{
					Debug.Assert(Delegates.pglGetPathTexGenfvNV != null, "pglGetPathTexGenfvNV not implemented");
					Delegates.pglGetPathTexGenfvNV((int)texCoordSet, (int)pname, p_value);
					LogCommand("glGetPathTexGenfvNV", null, texCoordSet, pname, value					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate uint glGenPathsNV(int range);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGenPathsNV pglGenPathsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glDeletePathsNV(uint path, int range);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glDeletePathsNV pglDeletePathsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			[return: MarshalAs(UnmanagedType.I1)]
			internal delegate bool glIsPathNV(uint path);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glIsPathNV pglIsPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathCommandsNV(uint path, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathCommandsNV pglPathCommandsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathCoordsNV(uint path, int numCoords, int coordType, IntPtr coords);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathCoordsNV pglPathCoordsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, int coordType, IntPtr coords);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathSubCommandsNV pglPathSubCommandsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathSubCoordsNV(uint path, int coordStart, int numCoords, int coordType, IntPtr coords);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathSubCoordsNV pglPathSubCoordsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathStringNV(uint path, int format, int length, IntPtr pathString);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathStringNV pglPathStringNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathGlyphsNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, int numGlyphs, int type, IntPtr charcodes, int handleMissingGlyphs, uint pathParameterTemplate, float emScale);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathGlyphsNV pglPathGlyphsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathGlyphRangeNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyph, int numGlyphs, int handleMissingGlyphs, uint pathParameterTemplate, float emScale);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathGlyphRangeNV pglPathGlyphRangeNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glWeightPathsNV pglWeightPathsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glCopyPathNV(uint resultPath, uint srcPath);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glCopyPathNV pglCopyPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glInterpolatePathsNV pglInterpolatePathsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTransformPathNV(uint resultPath, uint srcPath, int transformType, float* transformValues);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glTransformPathNV pglTransformPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathParameterivNV(uint path, int pname, int* value);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathParameterivNV pglPathParameterivNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathParameteriNV(uint path, int pname, int value);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathParameteriNV pglPathParameteriNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathParameterfvNV(uint path, int pname, float* value);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathParameterfvNV pglPathParameterfvNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathParameterfNV(uint path, int pname, float value);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathParameterfNV pglPathParameterfNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathDashArrayNV(uint path, int dashCount, float* dashArray);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathDashArrayNV pglPathDashArrayNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathStencilFuncNV(int func, int @ref, uint mask);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathStencilFuncNV pglPathStencilFuncNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathStencilDepthOffsetNV(float factor, float units);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathStencilDepthOffsetNV pglPathStencilDepthOffsetNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilFillPathNV(uint path, int fillMode, uint mask);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilFillPathNV pglStencilFillPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilStrokePathNV(uint path, int reference, uint mask);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilStrokePathNV pglStencilStrokePathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int transformType, float* transformValues);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilFillPathInstancedNV pglStencilFillPathInstancedNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int transformType, float* transformValues);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilStrokePathInstancedNV pglStencilStrokePathInstancedNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathCoverDepthFuncNV(int func);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathCoverDepthFuncNV pglPathCoverDepthFuncNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glCoverFillPathNV(uint path, int coverMode);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glCoverFillPathNV pglCoverFillPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glCoverStrokePathNV(uint path, int coverMode);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glCoverStrokePathNV pglCoverStrokePathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glCoverFillPathInstancedNV pglCoverFillPathInstancedNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int coverMode, int transformType, float* transformValues);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glCoverStrokePathInstancedNV pglCoverStrokePathInstancedNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathParameterivNV(uint path, int pname, int* value);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathParameterivNV pglGetPathParameterivNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathParameterfvNV(uint path, int pname, float* value);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathParameterfvNV pglGetPathParameterfvNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathCommandsNV(uint path, byte* commands);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathCommandsNV pglGetPathCommandsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathCoordsNV(uint path, float* coords);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathCoordsNV pglGetPathCoordsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathDashArrayNV(uint path, float* dashArray);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathDashArrayNV pglGetPathDashArrayNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathMetricsNV(uint metricQueryMask, int numPaths, int pathNameType, IntPtr paths, uint pathBase, int stride, float* metrics);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathMetricsNV pglGetPathMetricsNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathMetricRangeNV pglGetPathMetricRangeNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathSpacingNV(int pathListMode, int numPaths, int pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, int transformType, float* returnedSpacing);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathSpacingNV pglGetPathSpacingNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			[return: MarshalAs(UnmanagedType.I1)]
			internal delegate bool glIsPointInFillPathNV(uint path, uint mask, float x, float y);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glIsPointInFillPathNV pglIsPointInFillPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			[return: MarshalAs(UnmanagedType.I1)]
			internal delegate bool glIsPointInStrokePathNV(uint path, float x, float y);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glIsPointInStrokePathNV pglIsPointInStrokePathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate float glGetPathLengthNV(uint path, int startSegment, int numSegments);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetPathLengthNV pglGetPathLengthNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			[return: MarshalAs(UnmanagedType.I1)]
			internal delegate bool glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPointAlongPathNV pglPointAlongPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMatrixLoad3x2fNV(int matrixMode, float* m);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glMatrixLoad3x2fNV pglMatrixLoad3x2fNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMatrixLoad3x3fNV(int matrixMode, float* m);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glMatrixLoad3x3fNV pglMatrixLoad3x3fNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMatrixLoadTranspose3x3fNV(int matrixMode, float* m);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glMatrixLoadTranspose3x3fNV pglMatrixLoadTranspose3x3fNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMatrixMult3x2fNV(int matrixMode, float* m);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glMatrixMult3x2fNV pglMatrixMult3x2fNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMatrixMult3x3fNV(int matrixMode, float* m);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glMatrixMult3x3fNV pglMatrixMult3x3fNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMatrixMultTranspose3x3fNV(int matrixMode, float* m);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glMatrixMultTranspose3x3fNV pglMatrixMultTranspose3x3fNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilThenCoverFillPathNV pglStencilThenCoverFillPathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilThenCoverStrokePathNV pglStencilThenCoverStrokePathNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float* transformValues);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilThenCoverFillPathInstancedNV pglStencilThenCoverFillPathInstancedNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float* transformValues);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glStencilThenCoverStrokePathInstancedNV pglStencilThenCoverStrokePathInstancedNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate int glPathGlyphIndexRangeNV(int fontTarget, IntPtr fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathGlyphIndexRangeNV pglPathGlyphIndexRangeNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate int glPathGlyphIndexArrayNV(uint firstPathName, int fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathGlyphIndexArrayNV pglPathGlyphIndexArrayNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate int glPathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, uint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glPathMemoryGlyphIndexArrayNV pglPathMemoryGlyphIndexArrayNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float* coeffs);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glProgramPathFragmentInputGenNV pglProgramPathFragmentInputGenNV;

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetProgramResourcefvNV(uint program, int programInterface, uint index, int propCount, int* props, int bufSize, int* length, float* @params);

			[RequiredByFeature("GL_NV_path_rendering", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glGetProgramResourcefvNV pglGetProgramResourcefvNV;

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathColorGenNV(int color, int genMode, int colorFormat, float* coeffs);

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[ThreadStatic]
			internal static glPathColorGenNV pglPathColorGenNV;

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathTexGenNV(int texCoordSet, int genMode, int components, float* coeffs);

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[ThreadStatic]
			internal static glPathTexGenNV pglPathTexGenNV;

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glPathFogGenNV(int genMode);

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[ThreadStatic]
			internal static glPathFogGenNV pglPathFogGenNV;

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathColorGenivNV(int color, int pname, int* value);

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[ThreadStatic]
			internal static glGetPathColorGenivNV pglGetPathColorGenivNV;

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathColorGenfvNV(int color, int pname, float* value);

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[ThreadStatic]
			internal static glGetPathColorGenfvNV pglGetPathColorGenfvNV;

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathTexGenivNV(int texCoordSet, int pname, int* value);

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[ThreadStatic]
			internal static glGetPathTexGenivNV pglGetPathTexGenivNV;

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetPathTexGenfvNV(int texCoordSet, int pname, float* value);

			[RequiredByFeature("GL_NV_path_rendering", Profile = "compatibility")]
			[ThreadStatic]
			internal static glGetPathTexGenfvNV pglGetPathTexGenfvNV;

		}
	}

}
