
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_IMAGE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_IMAGE_NV = 0x9563;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_NO_INVOCATIONS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_NO_INVOCATIONS_NV = 0x9564;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_IMAGE_BINDING_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_IMAGE_BINDING_NV = 0x955B;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E;

		/// <summary>
		/// [GL] Value of GL_MAX_COARSE_FRAGMENT_SAMPLES_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF;

		/// <summary>
		/// [GL] Value of GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public const int SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0;

		/// <summary>
		/// [GL] glBindShadingRateImageNV: Binding for glBindShadingRateImageNV.
		/// </summary>
		/// <param name="texture">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public static void BindShadingRateImageNV(uint texture)
		{
			Debug.Assert(Delegates.pglBindShadingRateImageNV != null, "pglBindShadingRateImageNV not implemented");
			Delegates.pglBindShadingRateImageNV(texture);
			LogCommand("glBindShadingRateImageNV", null, texture			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetShadingRateImagePaletteNV: Binding for glGetShadingRateImagePaletteNV.
		/// </summary>
		/// <param name="viewport">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="entry">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="rate">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public static void GetShadingRateImagePaletteNV(uint viewport, uint entry, out int rate)
		{
			unsafe {
				fixed (int* p_rate = &rate)
				{
					Debug.Assert(Delegates.pglGetShadingRateImagePaletteNV != null, "pglGetShadingRateImagePaletteNV not implemented");
					Delegates.pglGetShadingRateImagePaletteNV(viewport, entry, p_rate);
					LogCommand("glGetShadingRateImagePaletteNV", null, viewport, entry, rate					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetShadingRateSampleLocationivNV: Binding for glGetShadingRateSampleLocationivNV.
		/// </summary>
		/// <param name="rate">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="samples">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="location">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public static void GetShadingRateSampleLocationivNV(int rate, uint samples, uint index, [Out] int[] location)
		{
			Debug.Assert(location.Length >= 3);
			unsafe {
				fixed (int* p_location = location)
				{
					Debug.Assert(Delegates.pglGetShadingRateSampleLocationivNV != null, "pglGetShadingRateSampleLocationivNV not implemented");
					Delegates.pglGetShadingRateSampleLocationivNV(rate, samples, index, p_location);
					LogCommand("glGetShadingRateSampleLocationivNV", null, rate, samples, index, location					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glShadingRateImageBarrierNV: Binding for glShadingRateImageBarrierNV.
		/// </summary>
		/// <param name="synchronize">
		/// A <see cref="T:bool"/>.
		/// </param>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public static void ShadingRateImageBarrierNV(bool synchronize)
		{
			Debug.Assert(Delegates.pglShadingRateImageBarrierNV != null, "pglShadingRateImageBarrierNV not implemented");
			Delegates.pglShadingRateImageBarrierNV(synchronize);
			LogCommand("glShadingRateImageBarrierNV", null, synchronize			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glShadingRateImagePaletteNV: Binding for glShadingRateImagePaletteNV.
		/// </summary>
		/// <param name="viewport">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="first">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="rates">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public static void ShadingRateImagePaletteNV(uint viewport, uint first, int[] rates)
		{
			unsafe {
				fixed (int* p_rates = rates)
				{
					Debug.Assert(Delegates.pglShadingRateImagePaletteNV != null, "pglShadingRateImagePaletteNV not implemented");
					Delegates.pglShadingRateImagePaletteNV(viewport, first, rates.Length, p_rates);
					LogCommand("glShadingRateImagePaletteNV", null, viewport, first, rates.Length, rates					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glShadingRateSampleOrderNV: Binding for glShadingRateSampleOrderNV.
		/// </summary>
		/// <param name="order">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public static void ShadingRateSampleOrderNV(int order)
		{
			Debug.Assert(Delegates.pglShadingRateSampleOrderNV != null, "pglShadingRateSampleOrderNV not implemented");
			Delegates.pglShadingRateSampleOrderNV(order);
			LogCommand("glShadingRateSampleOrderNV", null, order			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glShadingRateSampleOrderCustomNV: Binding for glShadingRateSampleOrderCustomNV.
		/// </summary>
		/// <param name="rate">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="samples">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="locations">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
		public static void ShadingRateSampleOrderCustomNV(int rate, uint samples, int[] locations)
		{
			unsafe {
				fixed (int* p_locations = locations)
				{
					Debug.Assert(Delegates.pglShadingRateSampleOrderCustomNV != null, "pglShadingRateSampleOrderCustomNV not implemented");
					Delegates.pglShadingRateSampleOrderCustomNV(rate, samples, p_locations);
					LogCommand("glShadingRateSampleOrderCustomNV", null, rate, samples, locations					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glBindShadingRateImageNV(uint texture);

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glBindShadingRateImageNV pglBindShadingRateImageNV;

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetShadingRateImagePaletteNV(uint viewport, uint entry, int* rate);

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glGetShadingRateImagePaletteNV pglGetShadingRateImagePaletteNV;

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetShadingRateSampleLocationivNV(int rate, uint samples, uint index, int* location);

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glGetShadingRateSampleLocationivNV pglGetShadingRateSampleLocationivNV;

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glShadingRateImageBarrierNV([MarshalAs(UnmanagedType.I1)] bool synchronize);

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glShadingRateImageBarrierNV pglShadingRateImageBarrierNV;

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glShadingRateImagePaletteNV(uint viewport, uint first, int count, int* rates);

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glShadingRateImagePaletteNV pglShadingRateImagePaletteNV;

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glShadingRateSampleOrderNV(int order);

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glShadingRateSampleOrderNV pglShadingRateSampleOrderNV;

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glShadingRateSampleOrderCustomNV(int rate, uint samples, int* locations);

			[RequiredByFeature("GL_NV_shading_rate_image", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glShadingRateSampleOrderCustomNV pglShadingRateSampleOrderCustomNV;

		}
	}

}
