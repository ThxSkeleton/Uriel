
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_EVAL_2D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_2D_NV = 0x86C0;

		/// <summary>
		/// [GL] Value of GL_EVAL_TRIANGULAR_2D_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_TRIANGULAR_2D_NV = 0x86C1;

		/// <summary>
		/// [GL] Value of GL_MAP_TESSELLATION_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int MAP_TESSELLATION_NV = 0x86C2;

		/// <summary>
		/// [GL] Value of GL_MAP_ATTRIB_U_ORDER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int MAP_ATTRIB_U_ORDER_NV = 0x86C3;

		/// <summary>
		/// [GL] Value of GL_MAP_ATTRIB_V_ORDER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int MAP_ATTRIB_V_ORDER_NV = 0x86C4;

		/// <summary>
		/// [GL] Value of GL_EVAL_FRACTIONAL_TESSELLATION_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB0_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB0_NV = 0x86C6;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB1_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB1_NV = 0x86C7;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB2_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB2_NV = 0x86C8;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB3_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB3_NV = 0x86C9;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB4_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB4_NV = 0x86CA;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB5_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB5_NV = 0x86CB;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB6_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB6_NV = 0x86CC;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB7_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB7_NV = 0x86CD;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB8_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB8_NV = 0x86CE;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB9_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB9_NV = 0x86CF;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB10_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB10_NV = 0x86D0;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB11_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB11_NV = 0x86D1;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB12_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB12_NV = 0x86D2;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB13_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB13_NV = 0x86D3;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB14_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB14_NV = 0x86D4;

		/// <summary>
		/// [GL] Value of GL_EVAL_VERTEX_ATTRIB15_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int EVAL_VERTEX_ATTRIB15_NV = 0x86D5;

		/// <summary>
		/// [GL] Value of GL_MAX_MAP_TESSELLATION_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int MAX_MAP_TESSELLATION_NV = 0x86D6;

		/// <summary>
		/// [GL] Value of GL_MAX_RATIONAL_EVAL_ORDER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_evaluators")]
		public const int MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;

		/// <summary>
		/// [GL] glMapControlPointsNV: Binding for glMapControlPointsNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="ustride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="vstride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="uorder">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="vorder">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="packed">
		/// A <see cref="T:bool"/>.
		/// </param>
		/// <param name="points">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void MapControlPointNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
		{
			Debug.Assert(Delegates.pglMapControlPointsNV != null, "pglMapControlPointsNV not implemented");
			Delegates.pglMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
			LogCommand("glMapControlPointsNV", null, target, index, type, ustride, vstride, uorder, vorder, packed, points			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMapControlPointsNV: Binding for glMapControlPointsNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="ustride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="vstride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="uorder">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="vorder">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="packed">
		/// A <see cref="T:bool"/>.
		/// </param>
		/// <param name="points">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void MapControlPointNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, object points)
		{
			GCHandle pin_points = GCHandle.Alloc(points, GCHandleType.Pinned);
			try {
				MapControlPointNV(target, index, type, ustride, vstride, uorder, vorder, packed, pin_points.AddrOfPinnedObject());
			} finally {
				pin_points.Free();
			}
		}

		/// <summary>
		/// [GL] glMapParameterivNV: Binding for glMapParameterivNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void MapParameterNV(int target, int pname, int[] @params)
		{
			unsafe {
				fixed (int* p_params = @params)
				{
					Debug.Assert(Delegates.pglMapParameterivNV != null, "pglMapParameterivNV not implemented");
					Delegates.pglMapParameterivNV(target, pname, p_params);
					LogCommand("glMapParameterivNV", null, target, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMapParameterfvNV: Binding for glMapParameterfvNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void MapParameterNV(int target, int pname, float[] @params)
		{
			unsafe {
				fixed (float* p_params = @params)
				{
					Debug.Assert(Delegates.pglMapParameterfvNV != null, "pglMapParameterfvNV not implemented");
					Delegates.pglMapParameterfvNV(target, pname, p_params);
					LogCommand("glMapParameterfvNV", null, target, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetMapControlPointsNV: Binding for glGetMapControlPointsNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="ustride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="vstride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="packed">
		/// A <see cref="T:bool"/>.
		/// </param>
		/// <param name="points">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void GetMapControlPointNV(int target, uint index, int type, int ustride, int vstride, bool packed, IntPtr points)
		{
			Debug.Assert(Delegates.pglGetMapControlPointsNV != null, "pglGetMapControlPointsNV not implemented");
			Delegates.pglGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
			LogCommand("glGetMapControlPointsNV", null, target, index, type, ustride, vstride, packed, points			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetMapControlPointsNV: Binding for glGetMapControlPointsNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="ustride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="vstride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="packed">
		/// A <see cref="T:bool"/>.
		/// </param>
		/// <param name="points">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void GetMapControlPointNV(int target, uint index, int type, int ustride, int vstride, bool packed, object points)
		{
			GCHandle pin_points = GCHandle.Alloc(points, GCHandleType.Pinned);
			try {
				GetMapControlPointNV(target, index, type, ustride, vstride, packed, pin_points.AddrOfPinnedObject());
			} finally {
				pin_points.Free();
			}
		}

		/// <summary>
		/// [GL] glGetMapParameterivNV: Binding for glGetMapParameterivNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void GetMapParameterNV(int target, int pname, [Out] int[] @params)
		{
			unsafe {
				fixed (int* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetMapParameterivNV != null, "pglGetMapParameterivNV not implemented");
					Delegates.pglGetMapParameterivNV(target, pname, p_params);
					LogCommand("glGetMapParameterivNV", null, target, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetMapParameterfvNV: Binding for glGetMapParameterfvNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void GetMapParameterNV(int target, int pname, [Out] float[] @params)
		{
			unsafe {
				fixed (float* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetMapParameterfvNV != null, "pglGetMapParameterfvNV not implemented");
					Delegates.pglGetMapParameterfvNV(target, pname, p_params);
					LogCommand("glGetMapParameterfvNV", null, target, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetMapAttribParameterivNV: Binding for glGetMapAttribParameterivNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void GetMapAttribParameterNV(int target, uint index, int pname, [Out] int[] @params)
		{
			unsafe {
				fixed (int* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetMapAttribParameterivNV != null, "pglGetMapAttribParameterivNV not implemented");
					Delegates.pglGetMapAttribParameterivNV(target, index, pname, p_params);
					LogCommand("glGetMapAttribParameterivNV", null, target, index, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetMapAttribParameterfvNV: Binding for glGetMapAttribParameterfvNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="index">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void GetMapAttribParameterNV(int target, uint index, int pname, [Out] float[] @params)
		{
			unsafe {
				fixed (float* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetMapAttribParameterfvNV != null, "pglGetMapAttribParameterfvNV not implemented");
					Delegates.pglGetMapAttribParameterfvNV(target, index, pname, p_params);
					LogCommand("glGetMapAttribParameterfvNV", null, target, index, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glEvalMapsNV: Binding for glEvalMapsNV.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mode">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_evaluators")]
		public static void EvalMapNV(int target, int mode)
		{
			Debug.Assert(Delegates.pglEvalMapsNV != null, "pglEvalMapsNV not implemented");
			Delegates.pglEvalMapsNV(target, mode);
			LogCommand("glEvalMapsNV", null, target, mode			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, [MarshalAs(UnmanagedType.I1)] bool packed, IntPtr points);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glMapControlPointsNV pglMapControlPointsNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMapParameterivNV(int target, int pname, int* @params);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glMapParameterivNV pglMapParameterivNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMapParameterfvNV(int target, int pname, float* @params);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glMapParameterfvNV pglMapParameterfvNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetMapControlPointsNV(int target, uint index, int type, int ustride, int vstride, [MarshalAs(UnmanagedType.I1)] bool packed, IntPtr points);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glGetMapControlPointsNV pglGetMapControlPointsNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetMapParameterivNV(int target, int pname, int* @params);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glGetMapParameterivNV pglGetMapParameterivNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetMapParameterfvNV(int target, int pname, float* @params);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glGetMapParameterfvNV pglGetMapParameterfvNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetMapAttribParameterivNV(int target, uint index, int pname, int* @params);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glGetMapAttribParameterivNV pglGetMapAttribParameterivNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetMapAttribParameterfvNV(int target, uint index, int pname, float* @params);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glGetMapAttribParameterfvNV pglGetMapAttribParameterfvNV;

			[RequiredByFeature("GL_NV_evaluators")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glEvalMapsNV(int target, int mode);

			[RequiredByFeature("GL_NV_evaluators")]
			[ThreadStatic]
			internal static glEvalMapsNV pglEvalMapsNV;

		}
	}

}
