
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_DEPTH_COMPONENT32F_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_depth_buffer_float")]
		public const int DEPTH_COMPONENT32F_NV = 0x8DAB;

		/// <summary>
		/// [GL] Value of GL_DEPTH32F_STENCIL8_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_depth_buffer_float")]
		public const int DEPTH32F_STENCIL8_NV = 0x8DAC;

		/// <summary>
		/// [GL] Value of GL_DEPTH_BUFFER_FLOAT_MODE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_depth_buffer_float")]
		public const int DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;

		/// <summary>
		/// [GL] glDepthRangedNV: Binding for glDepthRangedNV.
		/// </summary>
		/// <param name="zNear">
		/// A <see cref="T:double"/>.
		/// </param>
		/// <param name="zFar">
		/// A <see cref="T:double"/>.
		/// </param>
		[RequiredByFeature("GL_NV_depth_buffer_float")]
		public static void DepthRangedNV(double zNear, double zFar)
		{
			Debug.Assert(Delegates.pglDepthRangedNV != null, "pglDepthRangedNV not implemented");
			Delegates.pglDepthRangedNV(zNear, zFar);
			LogCommand("glDepthRangedNV", null, zNear, zFar			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glClearDepthdNV: Binding for glClearDepthdNV.
		/// </summary>
		/// <param name="depth">
		/// A <see cref="T:double"/>.
		/// </param>
		[RequiredByFeature("GL_NV_depth_buffer_float")]
		public static void ClearDepthdNV(double depth)
		{
			Debug.Assert(Delegates.pglClearDepthdNV != null, "pglClearDepthdNV not implemented");
			Delegates.pglClearDepthdNV(depth);
			LogCommand("glClearDepthdNV", null, depth			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glDepthBoundsdNV: Binding for glDepthBoundsdNV.
		/// </summary>
		/// <param name="zmin">
		/// A <see cref="T:double"/>.
		/// </param>
		/// <param name="zmax">
		/// A <see cref="T:double"/>.
		/// </param>
		[RequiredByFeature("GL_NV_depth_buffer_float")]
		public static void DepthBoundsdNV(double zmin, double zmax)
		{
			Debug.Assert(Delegates.pglDepthBoundsdNV != null, "pglDepthBoundsdNV not implemented");
			Delegates.pglDepthBoundsdNV(zmin, zmax);
			LogCommand("glDepthBoundsdNV", null, zmin, zmax			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_depth_buffer_float")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glDepthRangedNV(double zNear, double zFar);

			[RequiredByFeature("GL_NV_depth_buffer_float")]
			[ThreadStatic]
			internal static glDepthRangedNV pglDepthRangedNV;

			[RequiredByFeature("GL_NV_depth_buffer_float")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glClearDepthdNV(double depth);

			[RequiredByFeature("GL_NV_depth_buffer_float")]
			[ThreadStatic]
			internal static glClearDepthdNV pglClearDepthdNV;

			[RequiredByFeature("GL_NV_depth_buffer_float")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glDepthBoundsdNV(double zmin, double zmax);

			[RequiredByFeature("GL_NV_depth_buffer_float")]
			[ThreadStatic]
			internal static glDepthBoundsdNV pglDepthBoundsdNV;

		}
	}

}
