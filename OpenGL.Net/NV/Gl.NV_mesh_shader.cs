
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_MESH_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_SHADER_NV = 0x9559;

		/// <summary>
		/// [GL] Value of GL_TASK_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int TASK_SHADER_NV = 0x955A;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_UNIFORM_BLOCKS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_IMAGE_UNIFORMS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_UNIFORM_COMPONENTS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_ATOMIC_COUNTERS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66;

		/// <summary>
		/// [GL] Value of GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_UNIFORM_BLOCKS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_IMAGE_UNIFORMS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_UNIFORM_COMPONENTS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_ATOMIC_COUNTERS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E;

		/// <summary>
		/// [GL] Value of GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_OUTPUT_VERTICES_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_OUTPUT_VERTICES_NV = 0x9538;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_OUTPUT_PRIMITIVES_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_OUTPUT_COUNT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_OUTPUT_COUNT_NV = 0x953A;

		/// <summary>
		/// [GL] Value of GL_MAX_DRAW_MESH_TASKS_COUNT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_VIEWS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_VIEWS_NV = 0x9557;

		/// <summary>
		/// [GL] Value of GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF;

		/// <summary>
		/// [GL] Value of GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543;

		/// <summary>
		/// [GL] Value of GL_MAX_MESH_WORK_GROUP_SIZE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B;

		/// <summary>
		/// [GL] Value of GL_MAX_TASK_WORK_GROUP_SIZE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C;

		/// <summary>
		/// [GL] Value of GL_MESH_WORK_GROUP_SIZE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_WORK_GROUP_SIZE_NV = 0x953E;

		/// <summary>
		/// [GL] Value of GL_TASK_WORK_GROUP_SIZE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int TASK_WORK_GROUP_SIZE_NV = 0x953F;

		/// <summary>
		/// [GL] Value of GL_MESH_VERTICES_OUT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_VERTICES_OUT_NV = 0x9579;

		/// <summary>
		/// [GL] Value of GL_MESH_PRIMITIVES_OUT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_PRIMITIVES_OUT_NV = 0x957A;

		/// <summary>
		/// [GL] Value of GL_MESH_OUTPUT_TYPE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_OUTPUT_TYPE_NV = 0x957B;

		/// <summary>
		/// [GL] Value of GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C;

		/// <summary>
		/// [GL] Value of GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D;

		/// <summary>
		/// [GL] Value of GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E;

		/// <summary>
		/// [GL] Value of GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F;

		/// <summary>
		/// [GL] Value of GL_REFERENCED_BY_MESH_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int REFERENCED_BY_MESH_SHADER_NV = 0x95A0;

		/// <summary>
		/// [GL] Value of GL_REFERENCED_BY_TASK_SHADER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int REFERENCED_BY_TASK_SHADER_NV = 0x95A1;

		/// <summary>
		/// [GL] Value of GL_MESH_SUBROUTINE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_SUBROUTINE_NV = 0x957C;

		/// <summary>
		/// [GL] Value of GL_TASK_SUBROUTINE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int TASK_SUBROUTINE_NV = 0x957D;

		/// <summary>
		/// [GL] Value of GL_MESH_SUBROUTINE_UNIFORM_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int MESH_SUBROUTINE_UNIFORM_NV = 0x957E;

		/// <summary>
		/// [GL] Value of GL_TASK_SUBROUTINE_UNIFORM_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public const int TASK_SUBROUTINE_UNIFORM_NV = 0x957F;

		/// <summary>
		/// [GL] Value of GL_MESH_SHADER_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		[Log(BitmaskName = "GL")]
		public const uint MESH_SHADER_BIT_NV = 0x00000040;

		/// <summary>
		/// [GL] Value of GL_TASK_SHADER_BIT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		[Log(BitmaskName = "GL")]
		public const uint TASK_SHADER_BIT_NV = 0x00000080;

		/// <summary>
		/// [GL] glDrawMeshTasksNV: Binding for glDrawMeshTasksNV.
		/// </summary>
		/// <param name="first">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public static void DrawMeshNV(uint first, uint count)
		{
			Debug.Assert(Delegates.pglDrawMeshTasksNV != null, "pglDrawMeshTasksNV not implemented");
			Delegates.pglDrawMeshTasksNV(first, count);
			LogCommand("glDrawMeshTasksNV", null, first, count			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glDrawMeshTasksIndirectNV: Binding for glDrawMeshTasksIndirectNV.
		/// </summary>
		/// <param name="indirect">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public static void DrawMeshTasksIndirectNV(IntPtr indirect)
		{
			Debug.Assert(Delegates.pglDrawMeshTasksIndirectNV != null, "pglDrawMeshTasksIndirectNV not implemented");
			Delegates.pglDrawMeshTasksIndirectNV(indirect);
			LogCommand("glDrawMeshTasksIndirectNV", null, indirect			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMultiDrawMeshTasksIndirectNV: Binding for glMultiDrawMeshTasksIndirectNV.
		/// </summary>
		/// <param name="indirect">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="drawcount">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public static void MultiDrawMeshTasksIndirectNV(IntPtr indirect, int drawcount, int stride)
		{
			Debug.Assert(Delegates.pglMultiDrawMeshTasksIndirectNV != null, "pglMultiDrawMeshTasksIndirectNV not implemented");
			Delegates.pglMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);
			LogCommand("glMultiDrawMeshTasksIndirectNV", null, indirect, drawcount, stride			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMultiDrawMeshTasksIndirectCountNV: Binding for glMultiDrawMeshTasksIndirectCountNV.
		/// </summary>
		/// <param name="indirect">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="drawcount">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="maxdrawcount">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
		public static void MultiDrawMeshTasksIndirectCountNV(IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
		{
			Debug.Assert(Delegates.pglMultiDrawMeshTasksIndirectCountNV != null, "pglMultiDrawMeshTasksIndirectCountNV not implemented");
			Delegates.pglMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);
			LogCommand("glMultiDrawMeshTasksIndirectCountNV", null, indirect, drawcount, maxdrawcount, stride			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glDrawMeshTasksNV(uint first, uint count);

			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glDrawMeshTasksNV pglDrawMeshTasksNV;

			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glDrawMeshTasksIndirectNV(IntPtr indirect);

			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glDrawMeshTasksIndirectNV pglDrawMeshTasksIndirectNV;

			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMultiDrawMeshTasksIndirectNV(IntPtr indirect, int drawcount, int stride);

			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glMultiDrawMeshTasksIndirectNV pglMultiDrawMeshTasksIndirectNV;

			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glMultiDrawMeshTasksIndirectCountNV(IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride);

			[RequiredByFeature("GL_NV_mesh_shader", Api = "gl|glcore")]
			[ThreadStatic]
			internal static glMultiDrawMeshTasksIndirectCountNV pglMultiDrawMeshTasksIndirectCountNV;

		}
	}

}
