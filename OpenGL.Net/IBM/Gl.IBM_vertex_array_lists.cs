
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_VERTEX_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int VERTEX_ARRAY_LIST_IBM = 103070;

		/// <summary>
		/// [GL] Value of GL_NORMAL_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int NORMAL_ARRAY_LIST_IBM = 103071;

		/// <summary>
		/// [GL] Value of GL_COLOR_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int COLOR_ARRAY_LIST_IBM = 103072;

		/// <summary>
		/// [GL] Value of GL_INDEX_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int INDEX_ARRAY_LIST_IBM = 103073;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_COORD_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int TEXTURE_COORD_ARRAY_LIST_IBM = 103074;

		/// <summary>
		/// [GL] Value of GL_EDGE_FLAG_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int EDGE_FLAG_ARRAY_LIST_IBM = 103075;

		/// <summary>
		/// [GL] Value of GL_FOG_COORDINATE_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int FOG_COORDINATE_ARRAY_LIST_IBM = 103076;

		/// <summary>
		/// [GL] Value of GL_SECONDARY_COLOR_ARRAY_LIST_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;

		/// <summary>
		/// [GL] Value of GL_VERTEX_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;

		/// <summary>
		/// [GL] Value of GL_NORMAL_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;

		/// <summary>
		/// [GL] Value of GL_COLOR_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int COLOR_ARRAY_LIST_STRIDE_IBM = 103082;

		/// <summary>
		/// [GL] Value of GL_INDEX_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int INDEX_ARRAY_LIST_STRIDE_IBM = 103083;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;

		/// <summary>
		/// [GL] Value of GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;

		/// <summary>
		/// [GL] Value of GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;

		/// <summary>
		/// [GL] Value of GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM symbol.
		/// </summary>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public const int SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;

		/// <summary>
		/// [GL] glColorPointerListIBM: Binding for glColorPointerListIBM.
		/// </summary>
		/// <param name="size">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:ColorPointerType"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void ColorPointerListIBM(int size, ColorPointerType type, int stride, IntPtr[] pointer, int ptrstride)
		{
			unsafe {
				fixed (IntPtr* p_pointer = pointer)
				{
					Debug.Assert(Delegates.pglColorPointerListIBM != null, "pglColorPointerListIBM not implemented");
					Delegates.pglColorPointerListIBM(size, (int)type, stride, p_pointer, ptrstride);
					LogCommand("glColorPointerListIBM", null, size, type, stride, pointer, ptrstride					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glSecondaryColorPointerListIBM: Binding for glSecondaryColorPointerListIBM.
		/// </summary>
		/// <param name="size">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void SecondaryColorPointerListIBM(int size, int type, int stride, IntPtr[] pointer, int ptrstride)
		{
			unsafe {
				fixed (IntPtr* p_pointer = pointer)
				{
					Debug.Assert(Delegates.pglSecondaryColorPointerListIBM != null, "pglSecondaryColorPointerListIBM not implemented");
					Delegates.pglSecondaryColorPointerListIBM(size, type, stride, p_pointer, ptrstride);
					LogCommand("glSecondaryColorPointerListIBM", null, size, type, stride, pointer, ptrstride					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glEdgeFlagPointerListIBM: Binding for glEdgeFlagPointerListIBM.
		/// </summary>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:bool[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void EdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride)
		{
			Debug.Assert(Delegates.pglEdgeFlagPointerListIBM != null, "pglEdgeFlagPointerListIBM not implemented");
			Delegates.pglEdgeFlagPointerListIBM(stride, pointer, ptrstride);
			LogCommand("glEdgeFlagPointerListIBM", null, stride, pointer, ptrstride			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glFogCoordPointerListIBM: Binding for glFogCoordPointerListIBM.
		/// </summary>
		/// <param name="type">
		/// A <see cref="T:FogCoordinatePointerType"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void FogCoordPointerListIBM(FogCoordinatePointerType type, int stride, IntPtr[] pointer, int ptrstride)
		{
			unsafe {
				fixed (IntPtr* p_pointer = pointer)
				{
					Debug.Assert(Delegates.pglFogCoordPointerListIBM != null, "pglFogCoordPointerListIBM not implemented");
					Delegates.pglFogCoordPointerListIBM((int)type, stride, p_pointer, ptrstride);
					LogCommand("glFogCoordPointerListIBM", null, type, stride, pointer, ptrstride					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glIndexPointerListIBM: Binding for glIndexPointerListIBM.
		/// </summary>
		/// <param name="type">
		/// A <see cref="T:IndexPointerType"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void IndexPointerListIBM(IndexPointerType type, int stride, IntPtr[] pointer, int ptrstride)
		{
			unsafe {
				fixed (IntPtr* p_pointer = pointer)
				{
					Debug.Assert(Delegates.pglIndexPointerListIBM != null, "pglIndexPointerListIBM not implemented");
					Delegates.pglIndexPointerListIBM((int)type, stride, p_pointer, ptrstride);
					LogCommand("glIndexPointerListIBM", null, type, stride, pointer, ptrstride					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glNormalPointerListIBM: Binding for glNormalPointerListIBM.
		/// </summary>
		/// <param name="type">
		/// A <see cref="T:NormalPointerType"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void NormalPointerListIBM(NormalPointerType type, int stride, IntPtr[] pointer, int ptrstride)
		{
			unsafe {
				fixed (IntPtr* p_pointer = pointer)
				{
					Debug.Assert(Delegates.pglNormalPointerListIBM != null, "pglNormalPointerListIBM not implemented");
					Delegates.pglNormalPointerListIBM((int)type, stride, p_pointer, ptrstride);
					LogCommand("glNormalPointerListIBM", null, type, stride, pointer, ptrstride					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glTexCoordPointerListIBM: Binding for glTexCoordPointerListIBM.
		/// </summary>
		/// <param name="size">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:TexCoordPointerType"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void TexCoordPointerListIBM(int size, TexCoordPointerType type, int stride, IntPtr[] pointer, int ptrstride)
		{
			unsafe {
				fixed (IntPtr* p_pointer = pointer)
				{
					Debug.Assert(Delegates.pglTexCoordPointerListIBM != null, "pglTexCoordPointerListIBM not implemented");
					Delegates.pglTexCoordPointerListIBM(size, (int)type, stride, p_pointer, ptrstride);
					LogCommand("glTexCoordPointerListIBM", null, size, type, stride, pointer, ptrstride					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glVertexPointerListIBM: Binding for glVertexPointerListIBM.
		/// </summary>
		/// <param name="size">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:VertexPointerType"/>.
		/// </param>
		/// <param name="stride">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		/// <param name="ptrstride">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_IBM_vertex_array_lists")]
		public static void VertexPointerListIBM(int size, VertexPointerType type, int stride, IntPtr[] pointer, int ptrstride)
		{
			unsafe {
				fixed (IntPtr* p_pointer = pointer)
				{
					Debug.Assert(Delegates.pglVertexPointerListIBM != null, "pglVertexPointerListIBM not implemented");
					Delegates.pglVertexPointerListIBM(size, (int)type, stride, p_pointer, ptrstride);
					LogCommand("glVertexPointerListIBM", null, size, type, stride, pointer, ptrstride					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glColorPointerListIBM pglColorPointerListIBM;

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glSecondaryColorPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glSecondaryColorPointerListIBM pglSecondaryColorPointerListIBM;

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glEdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glEdgeFlagPointerListIBM pglEdgeFlagPointerListIBM;

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glFogCoordPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glFogCoordPointerListIBM pglFogCoordPointerListIBM;

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glIndexPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glIndexPointerListIBM pglIndexPointerListIBM;

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glNormalPointerListIBM(int type, int stride, IntPtr* pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glNormalPointerListIBM pglNormalPointerListIBM;

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glTexCoordPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glTexCoordPointerListIBM pglTexCoordPointerListIBM;

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glVertexPointerListIBM(int size, int type, int stride, IntPtr* pointer, int ptrstride);

			[RequiredByFeature("GL_IBM_vertex_array_lists")]
			[ThreadStatic]
			internal static glVertexPointerListIBM pglVertexPointerListIBM;

		}
	}

}
