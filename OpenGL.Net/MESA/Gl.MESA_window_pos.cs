
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] glWindowPos4dMESA: Binding for glWindowPos4dMESA.
		/// </summary>
		/// <param name="x">
		/// A <see cref="T:double"/>.
		/// </param>
		/// <param name="y">
		/// A <see cref="T:double"/>.
		/// </param>
		/// <param name="z">
		/// A <see cref="T:double"/>.
		/// </param>
		/// <param name="w">
		/// A <see cref="T:double"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(double x, double y, double z, double w)
		{
			Debug.Assert(Delegates.pglWindowPos4dMESA != null, "pglWindowPos4dMESA not implemented");
			Delegates.pglWindowPos4dMESA(x, y, z, w);
			LogCommand("glWindowPos4dMESA", null, x, y, z, w			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWindowPos4dvMESA: Binding for glWindowPos4dvMESA.
		/// </summary>
		/// <param name="v">
		/// A <see cref="T:double[]"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(double[] v)
		{
			Debug.Assert(v.Length >= 4);
			unsafe {
				fixed (double* p_v = v)
				{
					Debug.Assert(Delegates.pglWindowPos4dvMESA != null, "pglWindowPos4dvMESA not implemented");
					Delegates.pglWindowPos4dvMESA(p_v);
					LogCommand("glWindowPos4dvMESA", null, v					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWindowPos4fMESA: Binding for glWindowPos4fMESA.
		/// </summary>
		/// <param name="x">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="y">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="z">
		/// A <see cref="T:float"/>.
		/// </param>
		/// <param name="w">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(float x, float y, float z, float w)
		{
			Debug.Assert(Delegates.pglWindowPos4fMESA != null, "pglWindowPos4fMESA not implemented");
			Delegates.pglWindowPos4fMESA(x, y, z, w);
			LogCommand("glWindowPos4fMESA", null, x, y, z, w			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWindowPos4fvMESA: Binding for glWindowPos4fvMESA.
		/// </summary>
		/// <param name="v">
		/// A <see cref="T:float[]"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(float[] v)
		{
			Debug.Assert(v.Length >= 4);
			unsafe {
				fixed (float* p_v = v)
				{
					Debug.Assert(Delegates.pglWindowPos4fvMESA != null, "pglWindowPos4fvMESA not implemented");
					Delegates.pglWindowPos4fvMESA(p_v);
					LogCommand("glWindowPos4fvMESA", null, v					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWindowPos4iMESA: Binding for glWindowPos4iMESA.
		/// </summary>
		/// <param name="x">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="y">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="z">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="w">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(int x, int y, int z, int w)
		{
			Debug.Assert(Delegates.pglWindowPos4iMESA != null, "pglWindowPos4iMESA not implemented");
			Delegates.pglWindowPos4iMESA(x, y, z, w);
			LogCommand("glWindowPos4iMESA", null, x, y, z, w			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWindowPos4ivMESA: Binding for glWindowPos4ivMESA.
		/// </summary>
		/// <param name="v">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(int[] v)
		{
			Debug.Assert(v.Length >= 4);
			unsafe {
				fixed (int* p_v = v)
				{
					Debug.Assert(Delegates.pglWindowPos4ivMESA != null, "pglWindowPos4ivMESA not implemented");
					Delegates.pglWindowPos4ivMESA(p_v);
					LogCommand("glWindowPos4ivMESA", null, v					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWindowPos4sMESA: Binding for glWindowPos4sMESA.
		/// </summary>
		/// <param name="x">
		/// A <see cref="T:short"/>.
		/// </param>
		/// <param name="y">
		/// A <see cref="T:short"/>.
		/// </param>
		/// <param name="z">
		/// A <see cref="T:short"/>.
		/// </param>
		/// <param name="w">
		/// A <see cref="T:short"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(short x, short y, short z, short w)
		{
			Debug.Assert(Delegates.pglWindowPos4sMESA != null, "pglWindowPos4sMESA not implemented");
			Delegates.pglWindowPos4sMESA(x, y, z, w);
			LogCommand("glWindowPos4sMESA", null, x, y, z, w			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glWindowPos4svMESA: Binding for glWindowPos4svMESA.
		/// </summary>
		/// <param name="v">
		/// A <see cref="T:short[]"/>.
		/// </param>
		[RequiredByFeature("GL_MESA_window_pos")]
		public static void WindowPos4MESA(short[] v)
		{
			Debug.Assert(v.Length >= 4);
			unsafe {
				fixed (short* p_v = v)
				{
					Debug.Assert(Delegates.pglWindowPos4svMESA != null, "pglWindowPos4svMESA not implemented");
					Delegates.pglWindowPos4svMESA(p_v);
					LogCommand("glWindowPos4svMESA", null, v					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4dMESA(double x, double y, double z, double w);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4dMESA pglWindowPos4dMESA;

			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4dvMESA(double* v);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4dvMESA pglWindowPos4dvMESA;

			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4fMESA(float x, float y, float z, float w);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4fMESA pglWindowPos4fMESA;

			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4fvMESA(float* v);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4fvMESA pglWindowPos4fvMESA;

			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4iMESA(int x, int y, int z, int w);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4iMESA pglWindowPos4iMESA;

			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4ivMESA(int* v);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4ivMESA pglWindowPos4ivMESA;

			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4sMESA(short x, short y, short z, short w);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4sMESA pglWindowPos4sMESA;

			[RequiredByFeature("GL_MESA_window_pos")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glWindowPos4svMESA(short* v);

			[RequiredByFeature("GL_MESA_window_pos")]
			[ThreadStatic]
			internal static glWindowPos4svMESA pglWindowPos4svMESA;

		}
	}

}
