
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_GLOBAL_ALPHA_SUN symbol.
		/// </summary>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public const int GLOBAL_ALPHA_SUN = 0x81D9;

		/// <summary>
		/// [GL] Value of GL_GLOBAL_ALPHA_FACTOR_SUN symbol.
		/// </summary>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public const int GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;

		/// <summary>
		/// [GL] glGlobalAlphaFactorbSUN: Binding for glGlobalAlphaFactorbSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:sbyte"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactorSUN(sbyte factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactorbSUN != null, "pglGlobalAlphaFactorbSUN not implemented");
			Delegates.pglGlobalAlphaFactorbSUN(factor);
			LogCommand("glGlobalAlphaFactorbSUN", null, factor			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGlobalAlphaFactorsSUN: Binding for glGlobalAlphaFactorsSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:short"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactorSUN(short factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactorsSUN != null, "pglGlobalAlphaFactorsSUN not implemented");
			Delegates.pglGlobalAlphaFactorsSUN(factor);
			LogCommand("glGlobalAlphaFactorsSUN", null, factor			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGlobalAlphaFactoriSUN: Binding for glGlobalAlphaFactoriSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactorSUN(int factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactoriSUN != null, "pglGlobalAlphaFactoriSUN not implemented");
			Delegates.pglGlobalAlphaFactoriSUN(factor);
			LogCommand("glGlobalAlphaFactoriSUN", null, factor			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGlobalAlphaFactorfSUN: Binding for glGlobalAlphaFactorfSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:float"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactorSUN(float factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactorfSUN != null, "pglGlobalAlphaFactorfSUN not implemented");
			Delegates.pglGlobalAlphaFactorfSUN(factor);
			LogCommand("glGlobalAlphaFactorfSUN", null, factor			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGlobalAlphaFactordSUN: Binding for glGlobalAlphaFactordSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:double"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactorSUN(double factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactordSUN != null, "pglGlobalAlphaFactordSUN not implemented");
			Delegates.pglGlobalAlphaFactordSUN(factor);
			LogCommand("glGlobalAlphaFactordSUN", null, factor			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGlobalAlphaFactorubSUN: Binding for glGlobalAlphaFactorubSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:byte"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactorubSUN(byte factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactorubSUN != null, "pglGlobalAlphaFactorubSUN not implemented");
			Delegates.pglGlobalAlphaFactorubSUN(factor);
			LogCommand("glGlobalAlphaFactorubSUN", null, factor			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGlobalAlphaFactorusSUN: Binding for glGlobalAlphaFactorusSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:ushort"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactorusSUN(ushort factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactorusSUN != null, "pglGlobalAlphaFactorusSUN not implemented");
			Delegates.pglGlobalAlphaFactorusSUN(factor);
			LogCommand("glGlobalAlphaFactorusSUN", null, factor			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGlobalAlphaFactoruiSUN: Binding for glGlobalAlphaFactoruiSUN.
		/// </summary>
		/// <param name="factor">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_SUN_global_alpha")]
		public static void GlobalAlphaFactoruiSUN(uint factor)
		{
			Debug.Assert(Delegates.pglGlobalAlphaFactoruiSUN != null, "pglGlobalAlphaFactoruiSUN not implemented");
			Delegates.pglGlobalAlphaFactoruiSUN(factor);
			LogCommand("glGlobalAlphaFactoruiSUN", null, factor			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactorbSUN(sbyte factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactorbSUN pglGlobalAlphaFactorbSUN;

			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactorsSUN(short factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactorsSUN pglGlobalAlphaFactorsSUN;

			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactoriSUN(int factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactoriSUN pglGlobalAlphaFactoriSUN;

			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactorfSUN(float factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactorfSUN pglGlobalAlphaFactorfSUN;

			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactordSUN(double factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactordSUN pglGlobalAlphaFactordSUN;

			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactorubSUN(byte factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactorubSUN pglGlobalAlphaFactorubSUN;

			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactorusSUN(ushort factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactorusSUN pglGlobalAlphaFactorusSUN;

			[RequiredByFeature("GL_SUN_global_alpha")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGlobalAlphaFactoruiSUN(uint factor);

			[RequiredByFeature("GL_SUN_global_alpha")]
			[ThreadStatic]
			internal static glGlobalAlphaFactoruiSUN pglGlobalAlphaFactoruiSUN;

		}
	}

}
