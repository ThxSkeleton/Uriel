
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

// ReSharper disable InconsistentNaming
// ReSharper disable InheritdocConsiderUsage

namespace OpenGL
{
	public partial class Egl
	{
		/// <summary>
		/// Extension support listing.
		/// </summary>
		public partial class Extensions
		{
			/// <summary>
			/// Support for extension EGL_KHR_gl_texture_cubemap_image.
			/// </summary>
			[Extension("EGL_KHR_gl_texture_cubemap_image")]
			public bool GlTextureCubemapImage_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_wait_sync.
			/// </summary>
			[Extension("EGL_KHR_wait_sync")]
			public bool WaitSync_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_vg_parent_image.
			/// </summary>
			[Extension("EGL_KHR_vg_parent_image")]
			public bool VgParentImage_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_swap_buffers_with_damage.
			/// </summary>
			[Extension("EGL_KHR_swap_buffers_with_damage")]
			public bool SwapBuffersWithDamage_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_surfaceless_context.
			/// </summary>
			[Extension("EGL_KHR_surfaceless_context")]
			public bool SurfacelessContext_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_stream_producer_eglsurface.
			/// </summary>
			[Extension("EGL_KHR_stream_producer_eglsurface")]
			public bool StreamProducerEglsurface_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_stream_producer_aldatalocator.
			/// </summary>
			[Extension("EGL_KHR_stream_producer_aldatalocator")]
			public bool StreamProducerAldatalocator_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_stream_fifo.
			/// </summary>
			[Extension("EGL_KHR_stream_fifo")]
			public bool StreamFifo_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_stream_cross_process_fd.
			/// </summary>
			[Extension("EGL_KHR_stream_cross_process_fd")]
			public bool StreamCrossProcessFd_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_stream_consumer_gltexture.
			/// </summary>
			[Extension("EGL_KHR_stream_consumer_gltexture")]
			public bool StreamConsumerGltexture_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_stream_attrib.
			/// </summary>
			[Extension("EGL_KHR_stream_attrib")]
			public bool StreamAttrib_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_stream.
			/// </summary>
			[Extension("EGL_KHR_stream")]
			public bool Stream_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_reusable_sync.
			/// </summary>
			[Extension("EGL_KHR_reusable_sync")]
			public bool ReusableSync_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_platform_x11.
			/// </summary>
			[Extension("EGL_KHR_platform_x11")]
			public bool PlatformX11_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_platform_wayland.
			/// </summary>
			[Extension("EGL_KHR_platform_wayland")]
			public bool PlatformWayland_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_platform_gbm.
			/// </summary>
			[Extension("EGL_KHR_platform_gbm")]
			public bool PlatformGbm_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_platform_android.
			/// </summary>
			[Extension("EGL_KHR_platform_android")]
			public bool PlatformAndroid_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_partial_update.
			/// </summary>
			[Extension("EGL_KHR_partial_update")]
			public bool PartialUpdate_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_no_config_context.
			/// </summary>
			[Extension("EGL_KHR_no_config_context")]
			public bool NoConfigContext_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_mutable_render_buffer.
			/// </summary>
			[Extension("EGL_KHR_mutable_render_buffer")]
			public bool MutableRenderBuffer_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_lock_surface3.
			/// </summary>
			[Extension("EGL_KHR_lock_surface3")]
			public bool LockSurface3_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_lock_surface2.
			/// </summary>
			[Extension("EGL_KHR_lock_surface2")]
			public bool LockSurface2_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_lock_surface.
			/// </summary>
			[Extension("EGL_KHR_lock_surface")]
			public bool LockSurface_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_image_pixmap.
			/// </summary>
			[Extension("EGL_KHR_image_pixmap")]
			public bool ImagePixmap_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_image_base.
			/// </summary>
			[Extension("EGL_KHR_image_base")]
			public bool ImageBase_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_image.
			/// </summary>
			[Extension("EGL_KHR_image")]
			public bool Image_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_gl_texture_3D_image.
			/// </summary>
			[Extension("EGL_KHR_gl_texture_3D_image")]
			public bool GlTexture3DImage_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_gl_texture_2D_image.
			/// </summary>
			[Extension("EGL_KHR_gl_texture_2D_image")]
			public bool GlTexture2DImage_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_gl_renderbuffer_image.
			/// </summary>
			[Extension("EGL_KHR_gl_renderbuffer_image")]
			public bool GlRenderbufferImage_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_gl_colorspace.
			/// </summary>
			[Extension("EGL_KHR_gl_colorspace")]
			public bool GlColorspace_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_get_all_proc_addresses.
			/// </summary>
			[Extension("EGL_KHR_get_all_proc_addresses")]
			public bool GetAllProcAddresses_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_fence_sync.
			/// </summary>
			[Extension("EGL_KHR_fence_sync")]
			public bool FenceSync_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_debug.
			/// </summary>
			[Extension("EGL_KHR_debug")]
			public bool Debug_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_create_context_no_error.
			/// </summary>
			[Extension("EGL_KHR_create_context_no_error")]
			public bool CreateContextNoError_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_create_context.
			/// </summary>
			[Extension("EGL_KHR_create_context")]
			public bool CreateContext_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_context_flush_control.
			/// </summary>
			[Extension("EGL_KHR_context_flush_control")]
			public bool ContextFlushControl_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_client_get_all_proc_addresses.
			/// </summary>
			[Extension("EGL_KHR_client_get_all_proc_addresses")]
			public bool ClientGetAllProcAddresses_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_config_attribs.
			/// </summary>
			[Extension("EGL_KHR_config_attribs")]
			public bool ConfigAttribs_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_cl_event2.
			/// </summary>
			[Extension("EGL_KHR_cl_event2")]
			public bool ClEvent2_KHR;

			/// <summary>
			/// Support for extension EGL_KHR_cl_event.
			/// </summary>
			[Extension("EGL_KHR_cl_event")]
			public bool ClEvent_KHR;

			/// <summary>
			/// Support for extension EGL_ANDROID_blob_cache.
			/// </summary>
			[Extension("EGL_ANDROID_blob_cache")]
			public bool BlobCache_ANDROID;

			/// <summary>
			/// Support for extension EGL_TIZEN_image_native_surface.
			/// </summary>
			[Extension("EGL_TIZEN_image_native_surface")]
			public bool ImageNativeSurface_TIZEN;

			/// <summary>
			/// Support for extension EGL_ANDROID_create_native_client_buffer.
			/// </summary>
			[Extension("EGL_ANDROID_create_native_client_buffer")]
			public bool CreateNativeClientBuffer_ANDROID;

			/// <summary>
			/// Support for extension EGL_NV_system_time.
			/// </summary>
			[Extension("EGL_NV_system_time")]
			public bool SystemTime_NV;

			/// <summary>
			/// Support for extension EGL_NV_sync.
			/// </summary>
			[Extension("EGL_NV_sync")]
			public bool Sync_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_sync.
			/// </summary>
			[Extension("EGL_NV_stream_sync")]
			public bool StreamSync_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_socket_unix.
			/// </summary>
			[Extension("EGL_NV_stream_socket_unix")]
			public bool StreamSocketUnix_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_socket_inet.
			/// </summary>
			[Extension("EGL_NV_stream_socket_inet")]
			public bool StreamSocketInet_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_socket.
			/// </summary>
			[Extension("EGL_NV_stream_socket")]
			public bool StreamSocket_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_remote.
			/// </summary>
			[Extension("EGL_NV_stream_remote")]
			public bool StreamRemote_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_reset.
			/// </summary>
			[Extension("EGL_NV_stream_reset")]
			public bool StreamReset_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_metadata.
			/// </summary>
			[Extension("EGL_NV_stream_metadata")]
			public bool StreamMetadata_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_frame_limits.
			/// </summary>
			[Extension("EGL_NV_stream_frame_limits")]
			public bool StreamFrameLimits_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_fifo_synchronous.
			/// </summary>
			[Extension("EGL_NV_stream_fifo_synchronous")]
			public bool StreamFifoSynchronous_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_fifo_next.
			/// </summary>
			[Extension("EGL_NV_stream_fifo_next")]
			public bool StreamFifoNext_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_cross_system.
			/// </summary>
			[Extension("EGL_NV_stream_cross_system")]
			public bool StreamCrossSystem_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_cross_process.
			/// </summary>
			[Extension("EGL_NV_stream_cross_process")]
			public bool StreamCrossProcess_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_cross_partition.
			/// </summary>
			[Extension("EGL_NV_stream_cross_partition")]
			public bool StreamCrossPartition_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_cross_display.
			/// </summary>
			[Extension("EGL_NV_stream_cross_display")]
			public bool StreamCrossDisplay_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_cross_object.
			/// </summary>
			[Extension("EGL_NV_stream_cross_object")]
			public bool StreamCrossObject_NV;

			/// <summary>
			/// Support for extension EGL_NV_stream_consumer_gltexture_yuv.
			/// </summary>
			[Extension("EGL_NV_stream_consumer_gltexture_yuv")]
			public bool StreamConsumerGltextureYuv_NV;

			/// <summary>
			/// Support for extension EGL_NV_robustness_video_memory_purge.
			/// </summary>
			[Extension("EGL_NV_robustness_video_memory_purge")]
			public bool RobustnessVideoMemoryPurge_NV;

			/// <summary>
			/// Support for extension EGL_NV_post_sub_buffer.
			/// </summary>
			[Extension("EGL_NV_post_sub_buffer")]
			public bool PostSubBuffer_NV;

			/// <summary>
			/// Support for extension EGL_NV_post_convert_rounding.
			/// </summary>
			[Extension("EGL_NV_post_convert_rounding")]
			public bool PostConvertRounding_NV;

			/// <summary>
			/// Support for extension EGL_NV_native_query.
			/// </summary>
			[Extension("EGL_NV_native_query")]
			public bool NativeQuery_NV;

			/// <summary>
			/// Support for extension EGL_NV_device_cuda.
			/// </summary>
			[Extension("EGL_NV_device_cuda")]
			public bool DeviceCuda_NV;

			/// <summary>
			/// Support for extension EGL_NV_depth_nonlinear.
			/// </summary>
			[Extension("EGL_NV_depth_nonlinear")]
			public bool DepthNonlinear_NV;

			/// <summary>
			/// Support for extension EGL_NV_cuda_event.
			/// </summary>
			[Extension("EGL_NV_cuda_event")]
			public bool CudaEvent_NV;

			/// <summary>
			/// Support for extension EGL_NV_coverage_sample_resolve.
			/// </summary>
			[Extension("EGL_NV_coverage_sample_resolve")]
			public bool CoverageSampleResolve_NV;

			/// <summary>
			/// Support for extension EGL_NV_coverage_sample.
			/// </summary>
			[Extension("EGL_NV_coverage_sample")]
			public bool CoverageSample_NV;

			/// <summary>
			/// Support for extension EGL_NV_3dvision_surface.
			/// </summary>
			[Extension("EGL_NV_3dvision_surface")]
			public bool _3dvisionSurface_NV;

			/// <summary>
			/// Support for extension EGL_NOK_texture_from_pixmap.
			/// </summary>
			[Extension("EGL_NOK_texture_from_pixmap")]
			public bool TextureFromPixmap_NOK;

			/// <summary>
			/// Support for extension EGL_NOK_swap_region2.
			/// </summary>
			[Extension("EGL_NOK_swap_region2")]
			public bool SwapRegion2_NOK;

			/// <summary>
			/// Support for extension EGL_NOK_swap_region.
			/// </summary>
			[Extension("EGL_NOK_swap_region")]
			public bool SwapRegion_NOK;

			/// <summary>
			/// Support for extension EGL_MESA_platform_surfaceless.
			/// </summary>
			[Extension("EGL_MESA_platform_surfaceless")]
			public bool PlatformSurfaceless_MESA;

			/// <summary>
			/// Support for extension EGL_MESA_platform_gbm.
			/// </summary>
			[Extension("EGL_MESA_platform_gbm")]
			public bool PlatformGbm_MESA;

			/// <summary>
			/// Support for extension EGL_MESA_image_dma_buf_export.
			/// </summary>
			[Extension("EGL_MESA_image_dma_buf_export")]
			public bool ImageDmaBufExport_MESA;

			/// <summary>
			/// Support for extension EGL_MESA_drm_image.
			/// </summary>
			[Extension("EGL_MESA_drm_image")]
			public bool DrmImage_MESA;

			/// <summary>
			/// Support for extension EGL_TIZEN_image_native_buffer.
			/// </summary>
			[Extension("EGL_TIZEN_image_native_buffer")]
			public bool ImageNativeBuffer_TIZEN;

			/// <summary>
			/// Support for extension EGL_IMG_image_plane_attribs.
			/// </summary>
			[Extension("EGL_IMG_image_plane_attribs")]
			public bool ImagePlaneAttribs_IMG;

			/// <summary>
			/// Support for extension EGL_IMG_context_priority.
			/// </summary>
			[Extension("EGL_IMG_context_priority")]
			public bool ContextPriority_IMG;

			/// <summary>
			/// Support for extension EGL_HI_colorformats.
			/// </summary>
			[Extension("EGL_HI_colorformats")]
			public bool Colorformats_HI;

			/// <summary>
			/// Support for extension EGL_HI_clientpixmap.
			/// </summary>
			[Extension("EGL_HI_clientpixmap")]
			public bool Clientpixmap_HI;

			/// <summary>
			/// Support for extension EGL_ANDROID_framebuffer_target.
			/// </summary>
			[Extension("EGL_ANDROID_framebuffer_target")]
			public bool FramebufferTarget_ANDROID;

			/// <summary>
			/// Support for extension EGL_ANDROID_front_buffer_auto_refresh.
			/// </summary>
			[Extension("EGL_ANDROID_front_buffer_auto_refresh")]
			public bool FrontBufferAutoRefresh_ANDROID;

			/// <summary>
			/// Support for extension EGL_ANDROID_image_native_buffer.
			/// </summary>
			[Extension("EGL_ANDROID_image_native_buffer")]
			public bool ImageNativeBuffer_ANDROID;

			/// <summary>
			/// Support for extension EGL_ANDROID_native_fence_sync.
			/// </summary>
			[Extension("EGL_ANDROID_native_fence_sync")]
			public bool NativeFenceSync_ANDROID;

			/// <summary>
			/// Support for extension EGL_ANDROID_presentation_time.
			/// </summary>
			[Extension("EGL_ANDROID_presentation_time")]
			public bool PresentationTime_ANDROID;

			/// <summary>
			/// Support for extension EGL_ANDROID_recordable.
			/// </summary>
			[Extension("EGL_ANDROID_recordable")]
			public bool Recordable_ANDROID;

			/// <summary>
			/// Support for extension EGL_ANGLE_d3d_share_handle_client_buffer.
			/// </summary>
			[Extension("EGL_ANGLE_d3d_share_handle_client_buffer")]
			public bool D3dShareHandleClientBuffer_ANGLE;

			/// <summary>
			/// Support for extension EGL_ANGLE_device_d3d.
			/// </summary>
			[Extension("EGL_ANGLE_device_d3d")]
			public bool DeviceD3d_ANGLE;

			/// <summary>
			/// Support for extension EGL_ANGLE_query_surface_pointer.
			/// </summary>
			[Extension("EGL_ANGLE_query_surface_pointer")]
			public bool QuerySurfacePointer_ANGLE;

			/// <summary>
			/// Support for extension EGL_ANGLE_surface_d3d_texture_2d_share_handle.
			/// </summary>
			[Extension("EGL_ANGLE_surface_d3d_texture_2d_share_handle")]
			public bool SurfaceD3dTexture2dShareHandle_ANGLE;

			/// <summary>
			/// Support for extension EGL_ANGLE_window_fixed_size.
			/// </summary>
			[Extension("EGL_ANGLE_window_fixed_size")]
			public bool WindowFixedSize_ANGLE;

			/// <summary>
			/// Support for extension EGL_ARM_implicit_external_sync.
			/// </summary>
			[Extension("EGL_ARM_implicit_external_sync")]
			public bool ImplicitExternalSync_ARM;

			/// <summary>
			/// Support for extension EGL_ARM_pixmap_multisample_discard.
			/// </summary>
			[Extension("EGL_ARM_pixmap_multisample_discard")]
			public bool PixmapMultisampleDiscard_ARM;

			/// <summary>
			/// Support for extension EGL_EXT_output_base.
			/// </summary>
			[Extension("EGL_EXT_output_base")]
			public bool OutputBase_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_multiview_window.
			/// </summary>
			[Extension("EGL_EXT_multiview_window")]
			public bool MultiviewWindow_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_yuv_surface.
			/// </summary>
			[Extension("EGL_EXT_yuv_surface")]
			public bool YuvSurface_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_image_dma_buf_import.
			/// </summary>
			[Extension("EGL_EXT_image_dma_buf_import")]
			public bool ImageDmaBufImport_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_gl_colorspace_scrgb_linear.
			/// </summary>
			[Extension("EGL_EXT_gl_colorspace_scrgb_linear")]
			public bool GlColorspaceScrgbLinear_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_gl_colorspace_bt2020_pq.
			/// </summary>
			[Extension("EGL_EXT_gl_colorspace_bt2020_pq")]
			public bool GlColorspaceBt2020Pq_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_gl_colorspace_bt2020_linear.
			/// </summary>
			[Extension("EGL_EXT_gl_colorspace_bt2020_linear")]
			public bool GlColorspaceBt2020Linear_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_device_query.
			/// </summary>
			[Extension("EGL_EXT_device_query")]
			public bool DeviceQuery_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_device_openwf.
			/// </summary>
			[Extension("EGL_EXT_device_openwf")]
			public bool DeviceOpenwf_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_device_enumeration.
			/// </summary>
			[Extension("EGL_EXT_device_enumeration")]
			public bool DeviceEnumeration_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_device_drm.
			/// </summary>
			[Extension("EGL_EXT_device_drm")]
			public bool DeviceDrm_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_device_base.
			/// </summary>
			[Extension("EGL_EXT_device_base")]
			public bool DeviceBase_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_create_context_robustness.
			/// </summary>
			[Extension("EGL_EXT_create_context_robustness")]
			public bool CreateContextRobustness_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_client_extensions.
			/// </summary>
			[Extension("EGL_EXT_client_extensions")]
			public bool ClientExtensions_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_buffer_age.
			/// </summary>
			[Extension("EGL_EXT_buffer_age")]
			public bool BufferAge_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_image_dma_buf_import_modifiers.
			/// </summary>
			[Extension("EGL_EXT_image_dma_buf_import_modifiers")]
			public bool ImageDmaBufImportModifiers_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_output_drm.
			/// </summary>
			[Extension("EGL_EXT_output_drm")]
			public bool OutputDrm_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_output_openwf.
			/// </summary>
			[Extension("EGL_EXT_output_openwf")]
			public bool OutputOpenwf_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_pixel_format_float.
			/// </summary>
			[Extension("EGL_EXT_pixel_format_float")]
			public bool PixelFormatFloat_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_platform_base.
			/// </summary>
			[Extension("EGL_EXT_platform_base")]
			public bool PlatformBase_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_platform_device.
			/// </summary>
			[Extension("EGL_EXT_platform_device")]
			public bool PlatformDevice_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_platform_wayland.
			/// </summary>
			[Extension("EGL_EXT_platform_wayland")]
			public bool PlatformWayland_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_platform_x11.
			/// </summary>
			[Extension("EGL_EXT_platform_x11")]
			public bool PlatformX11_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_protected_content.
			/// </summary>
			[Extension("EGL_EXT_protected_content")]
			public bool ProtectedContent_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_protected_surface.
			/// </summary>
			[Extension("EGL_EXT_protected_surface")]
			public bool ProtectedSurface_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_stream_consumer_egloutput.
			/// </summary>
			[Extension("EGL_EXT_stream_consumer_egloutput")]
			public bool StreamConsumerEgloutput_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_surface_SMPTE2086_metadata.
			/// </summary>
			[Extension("EGL_EXT_surface_SMPTE2086_metadata")]
			public bool SurfaceSMPTE2086Metadata_EXT;

			/// <summary>
			/// Support for extension EGL_EXT_swap_buffers_with_damage.
			/// </summary>
			[Extension("EGL_EXT_swap_buffers_with_damage")]
			public bool SwapBuffersWithDamage_EXT;

		}
}

}
