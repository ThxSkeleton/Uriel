
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_LGPU_SEPARATE_STORAGE_BIT_NVX symbol.
		/// </summary>
		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		[Log(BitmaskName = "GL")]
		public const int LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800;

		/// <summary>
		/// [GL] Value of GL_MAX_LGPU_GPUS_NVX symbol.
		/// </summary>
		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		public const int MAX_LGPU_GPUS_NVX = 0x92BA;

		/// <summary>
		/// [GL] glLGPUNamedBufferSubDataNVX: Binding for glLGPUNamedBufferSubDataNVX.
		/// </summary>
		/// <param name="gpuMask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="buffer">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="offset">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="size">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="data">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		public static void LGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, IntPtr offset, uint size, IntPtr data)
		{
			Debug.Assert(Delegates.pglLGPUNamedBufferSubDataNVX != null, "pglLGPUNamedBufferSubDataNVX not implemented");
			Delegates.pglLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
			LogCommand("glLGPUNamedBufferSubDataNVX", null, gpuMask, buffer, offset, size, data			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glLGPUNamedBufferSubDataNVX: Binding for glLGPUNamedBufferSubDataNVX.
		/// </summary>
		/// <param name="gpuMask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="buffer">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="offset">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		/// <param name="size">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="data">
		/// A <see cref="T:object"/>.
		/// </param>
		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		public static void LGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, IntPtr offset, uint size, object data)
		{
			GCHandle pin_data = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, pin_data.AddrOfPinnedObject());
			} finally {
				pin_data.Free();
			}
		}

		/// <summary>
		/// [GL] glLGPUCopyImageSubDataNVX: Binding for glLGPUCopyImageSubDataNVX.
		/// </summary>
		/// <param name="sourceGpu">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="destinationGpuMask">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="srcName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="srcTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="srcLevel">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="srcX">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="srxY">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="srcZ">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="dstName">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="dstTarget">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="dstLevel">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="dstX">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="dstY">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="dstZ">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="depth">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		public static void LGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
		{
			Debug.Assert(Delegates.pglLGPUCopyImageSubDataNVX != null, "pglLGPUCopyImageSubDataNVX not implemented");
			Delegates.pglLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
			LogCommand("glLGPUCopyImageSubDataNVX", null, sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glLGPUInterlockNVX: Binding for glLGPUInterlockNVX.
		/// </summary>
		[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
		public static void NVX()
		{
			Debug.Assert(Delegates.pglLGPUInterlockNVX != null, "pglLGPUInterlockNVX not implemented");
			Delegates.pglLGPUInterlockNVX();
			LogCommand("glLGPUInterlockNVX", null			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, IntPtr offset, uint size, IntPtr data);

			[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
			[ThreadStatic]
			internal static glLGPUNamedBufferSubDataNVX pglLGPUNamedBufferSubDataNVX;

			[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

			[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
			[ThreadStatic]
			internal static glLGPUCopyImageSubDataNVX pglLGPUCopyImageSubDataNVX;

			[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glLGPUInterlockNVX();

			[RequiredByFeature("GL_NVX_linked_gpu_multicast")]
			[ThreadStatic]
			internal static glLGPUInterlockNVX pglLGPUInterlockNVX;

		}
	}

}
