
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_TEXTURE_WIDTH_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_WIDTH_QCOM = 0x8BD2;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_HEIGHT_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_HEIGHT_QCOM = 0x8BD3;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_DEPTH_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_DEPTH_QCOM = 0x8BD4;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_INTERNAL_FORMAT_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_FORMAT_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_FORMAT_QCOM = 0x8BD6;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_TYPE_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_TYPE_QCOM = 0x8BD7;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_IMAGE_VALID_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_NUM_LEVELS_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_TARGET_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_TARGET_QCOM = 0x8BDA;

		/// <summary>
		/// [GL] Value of GL_TEXTURE_OBJECT_VALID_QCOM symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;

		/// <summary>
		/// [GL] Value of GL_STATE_RESTORE symbol.
		/// </summary>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public const int STATE_RESTORE = 0x8BDC;

		/// <summary>
		/// [GL] glExtGetTexturesQCOM: Binding for glExtGetTexturesQCOM.
		/// </summary>
		/// <param name="textures">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="maxTextures">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="numTextures">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtGetTexturesQCOM(uint[] textures, int maxTextures, int[] numTextures)
		{
			unsafe {
				fixed (uint* p_textures = textures)
				fixed (int* p_numTextures = numTextures)
				{
					Debug.Assert(Delegates.pglExtGetTexturesQCOM != null, "pglExtGetTexturesQCOM not implemented");
					Delegates.pglExtGetTexturesQCOM(p_textures, maxTextures, p_numTextures);
					LogCommand("glExtGetTexturesQCOM", null, textures, maxTextures, numTextures					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glExtGetBuffersQCOM: Binding for glExtGetBuffersQCOM.
		/// </summary>
		/// <param name="buffers">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="numBuffers">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtGetBuffersQCOM(uint[] buffers, int[] numBuffers)
		{
			Debug.Assert(numBuffers.Length >= 1);
			unsafe {
				fixed (uint* p_buffers = buffers)
				fixed (int* p_numBuffers = numBuffers)
				{
					Debug.Assert(Delegates.pglExtGetBuffersQCOM != null, "pglExtGetBuffersQCOM not implemented");
					Delegates.pglExtGetBuffersQCOM(p_buffers, buffers.Length, p_numBuffers);
					LogCommand("glExtGetBuffersQCOM", null, buffers, buffers.Length, numBuffers					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glExtGetRenderbuffersQCOM: Binding for glExtGetRenderbuffersQCOM.
		/// </summary>
		/// <param name="renderbuffers">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="numRenderbuffers">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtGetRenderbuffersQCOM(uint[] renderbuffers, int[] numRenderbuffers)
		{
			Debug.Assert(numRenderbuffers.Length >= 1);
			unsafe {
				fixed (uint* p_renderbuffers = renderbuffers)
				fixed (int* p_numRenderbuffers = numRenderbuffers)
				{
					Debug.Assert(Delegates.pglExtGetRenderbuffersQCOM != null, "pglExtGetRenderbuffersQCOM not implemented");
					Delegates.pglExtGetRenderbuffersQCOM(p_renderbuffers, renderbuffers.Length, p_numRenderbuffers);
					LogCommand("glExtGetRenderbuffersQCOM", null, renderbuffers, renderbuffers.Length, numRenderbuffers					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glExtGetFramebuffersQCOM: Binding for glExtGetFramebuffersQCOM.
		/// </summary>
		/// <param name="framebuffers">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		/// <param name="numFramebuffers">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtGetFramebuffersQCOM(uint[] framebuffers, int[] numFramebuffers)
		{
			Debug.Assert(numFramebuffers.Length >= 1);
			unsafe {
				fixed (uint* p_framebuffers = framebuffers)
				fixed (int* p_numFramebuffers = numFramebuffers)
				{
					Debug.Assert(Delegates.pglExtGetFramebuffersQCOM != null, "pglExtGetFramebuffersQCOM not implemented");
					Delegates.pglExtGetFramebuffersQCOM(p_framebuffers, framebuffers.Length, p_numFramebuffers);
					LogCommand("glExtGetFramebuffersQCOM", null, framebuffers, framebuffers.Length, numFramebuffers					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glExtGetTexLevelParameterivQCOM: Binding for glExtGetTexLevelParameterivQCOM.
		/// </summary>
		/// <param name="texture">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="face">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="level">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:int[]"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int[] @params)
		{
			unsafe {
				fixed (int* p_params = @params)
				{
					Debug.Assert(Delegates.pglExtGetTexLevelParameterivQCOM != null, "pglExtGetTexLevelParameterivQCOM not implemented");
					Delegates.pglExtGetTexLevelParameterivQCOM(texture, face, level, pname, p_params);
					LogCommand("glExtGetTexLevelParameterivQCOM", null, texture, face, level, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glExtTexObjectStateOverrideiQCOM: Binding for glExtTexObjectStateOverrideiQCOM.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="param">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtTexObjectStateOverrideiQCOM(int target, int pname, int param)
		{
			Debug.Assert(Delegates.pglExtTexObjectStateOverrideiQCOM != null, "pglExtTexObjectStateOverrideiQCOM not implemented");
			Delegates.pglExtTexObjectStateOverrideiQCOM(target, pname, param);
			LogCommand("glExtTexObjectStateOverrideiQCOM", null, target, pname, param			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glExtGetTexSubImageQCOM: Binding for glExtGetTexSubImageQCOM.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="level">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="xoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="yoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="zoffset">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="depth">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="format">
		/// A <see cref="T:PixelFormat"/>.
		/// </param>
		/// <param name="type">
		/// A <see cref="T:PixelType"/>.
		/// </param>
		/// <param name="texels">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr texels)
		{
			Debug.Assert(Delegates.pglExtGetTexSubImageQCOM != null, "pglExtGetTexSubImageQCOM not implemented");
			Delegates.pglExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, (int)format, (int)type, texels);
			LogCommand("glExtGetTexSubImageQCOM", null, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glExtGetBufferPointervQCOM: Binding for glExtGetBufferPointervQCOM.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:IntPtr[]"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
		public static void ExtGetBufferPointervQCOM(int target, IntPtr[] @params)
		{
			unsafe {
				fixed (IntPtr* p_params = @params)
				{
					Debug.Assert(Delegates.pglExtGetBufferPointervQCOM != null, "pglExtGetBufferPointervQCOM not implemented");
					Delegates.pglExtGetBufferPointervQCOM(target, p_params);
					LogCommand("glExtGetBufferPointervQCOM", null, target, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtGetTexturesQCOM pglExtGetTexturesQCOM;

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtGetBuffersQCOM pglExtGetBuffersQCOM;

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtGetRenderbuffersQCOM pglExtGetRenderbuffersQCOM;

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtGetFramebuffersQCOM pglExtGetFramebuffersQCOM;

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, int* @params);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtGetTexLevelParameterivQCOM pglExtGetTexLevelParameterivQCOM;

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtTexObjectStateOverrideiQCOM pglExtTexObjectStateOverrideiQCOM;

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr texels);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtGetTexSubImageQCOM pglExtGetTexSubImageQCOM;

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glExtGetBufferPointervQCOM(int target, IntPtr* @params);

			[RequiredByFeature("GL_QCOM_extended_get", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glExtGetBufferPointervQCOM pglExtGetBufferPointervQCOM;

		}
	}

}
