
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] glGetDriverControlsQCOM: Binding for glGetDriverControlsQCOM.
		/// </summary>
		/// <param name="num">
		/// A <see cref="T:int[]"/>.
		/// </param>
		/// <param name="driverControls">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		public static void GetDriverControlsQCOM([Out] int[] num, [Out] uint[] driverControls)
		{
			unsafe {
				fixed (int* p_num = num)
				fixed (uint* p_driverControls = driverControls)
				{
					Debug.Assert(Delegates.pglGetDriverControlsQCOM != null, "pglGetDriverControlsQCOM not implemented");
					Delegates.pglGetDriverControlsQCOM(p_num, driverControls.Length, p_driverControls);
					LogCommand("glGetDriverControlsQCOM", null, num, driverControls.Length, driverControls					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetDriverControlStringQCOM: Binding for glGetDriverControlStringQCOM.
		/// </summary>
		/// <param name="driverControl">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="bufSize">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="length">
		/// A <see cref="T:int[]"/>.
		/// </param>
		/// <param name="driverControlString">
		/// A <see cref="T:StringBuilder"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		public static void GetDriverControlStringQCOM(uint driverControl, int bufSize, [Out] int[] length, StringBuilder driverControlString)
		{
			unsafe {
				fixed (int* p_length = length)
				{
					Debug.Assert(Delegates.pglGetDriverControlStringQCOM != null, "pglGetDriverControlStringQCOM not implemented");
					Delegates.pglGetDriverControlStringQCOM(driverControl, bufSize, p_length, driverControlString);
					LogCommand("glGetDriverControlStringQCOM", null, driverControl, bufSize, length, driverControlString					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glEnableDriverControlQCOM: Binding for glEnableDriverControlQCOM.
		/// </summary>
		/// <param name="driverControl">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		public static void EnableDriverControlQCOM(uint driverControl)
		{
			Debug.Assert(Delegates.pglEnableDriverControlQCOM != null, "pglEnableDriverControlQCOM not implemented");
			Delegates.pglEnableDriverControlQCOM(driverControl);
			LogCommand("glEnableDriverControlQCOM", null, driverControl			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glDisableDriverControlQCOM: Binding for glDisableDriverControlQCOM.
		/// </summary>
		/// <param name="driverControl">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
		public static void DisableDriverControlQCOM(uint driverControl)
		{
			Debug.Assert(Delegates.pglDisableDriverControlQCOM != null, "pglDisableDriverControlQCOM not implemented");
			Delegates.pglDisableDriverControlQCOM(driverControl);
			LogCommand("glDisableDriverControlQCOM", null, driverControl			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetDriverControlsQCOM(int* num, int size, uint* driverControls);

			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glGetDriverControlsQCOM pglGetDriverControlsQCOM;

			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, StringBuilder driverControlString);

			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glGetDriverControlStringQCOM pglGetDriverControlStringQCOM;

			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glEnableDriverControlQCOM(uint driverControl);

			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glEnableDriverControlQCOM pglEnableDriverControlQCOM;

			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glDisableDriverControlQCOM(uint driverControl);

			[RequiredByFeature("GL_QCOM_driver_control", Api = "gles1|gles2")]
			[ThreadStatic]
			internal static glDisableDriverControlQCOM pglDisableDriverControlQCOM;

		}
	}

}
