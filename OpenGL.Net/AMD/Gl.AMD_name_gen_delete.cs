
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_DATA_BUFFER_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_name_gen_delete")]
		public const int DATA_BUFFER_AMD = 0x9151;

		/// <summary>
		/// [GL] Value of GL_PERFORMANCE_MONITOR_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_name_gen_delete")]
		public const int PERFORMANCE_MONITOR_AMD = 0x9152;

		/// <summary>
		/// [GL] Value of GL_SAMPLER_OBJECT_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_name_gen_delete")]
		public const int SAMPLER_OBJECT_AMD = 0x9155;

		/// <summary>
		/// [GL] glGenNamesAMD: Binding for glGenNamesAMD.
		/// </summary>
		/// <param name="identifier">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="names">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		[RequiredByFeature("GL_AMD_name_gen_delete")]
		public static void GenNameAMD(int identifier, uint[] names)
		{
			unsafe {
				fixed (uint* p_names = names)
				{
					Debug.Assert(Delegates.pglGenNamesAMD != null, "pglGenNamesAMD not implemented");
					Delegates.pglGenNamesAMD(identifier, (uint)names.Length, p_names);
					LogCommand("glGenNamesAMD", null, identifier, names.Length, names					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGenNamesAMD: Binding for glGenNamesAMD.
		/// </summary>
		/// <param name="identifier">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_AMD_name_gen_delete")]
		public static uint GenNameAMD(int identifier)
		{
			uint retValue;
			unsafe {
				Delegates.pglGenNamesAMD(identifier, 1, &retValue);
				LogCommand("glGenNamesAMD", null, identifier, 1, "{ " + retValue + " }"				);
			}
			DebugCheckErrors(null);
			return (retValue);
		}

		/// <summary>
		/// [GL] glDeleteNamesAMD: Binding for glDeleteNamesAMD.
		/// </summary>
		/// <param name="identifier">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="names">
		/// A <see cref="T:uint[]"/>.
		/// </param>
		[RequiredByFeature("GL_AMD_name_gen_delete")]
		public static void DeleteNameAMD(int identifier, uint[] names)
		{
			unsafe {
				fixed (uint* p_names = names)
				{
					Debug.Assert(Delegates.pglDeleteNamesAMD != null, "pglDeleteNamesAMD not implemented");
					Delegates.pglDeleteNamesAMD(identifier, (uint)names.Length, p_names);
					LogCommand("glDeleteNamesAMD", null, identifier, names.Length, names					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glIsNameAMD: Binding for glIsNameAMD.
		/// </summary>
		/// <param name="identifier">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="name">
		/// A <see cref="T:uint"/>.
		/// </param>
		[RequiredByFeature("GL_AMD_name_gen_delete")]
		public static bool IsNameAMD(int identifier, uint name)
		{
			bool retValue;

			Debug.Assert(Delegates.pglIsNameAMD != null, "pglIsNameAMD not implemented");
			retValue = Delegates.pglIsNameAMD(identifier, name);
			LogCommand("glIsNameAMD", retValue, identifier, name			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_AMD_name_gen_delete")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glGenNamesAMD(int identifier, uint num, uint* names);

			[RequiredByFeature("GL_AMD_name_gen_delete")]
			[ThreadStatic]
			internal static glGenNamesAMD pglGenNamesAMD;

			[RequiredByFeature("GL_AMD_name_gen_delete")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glDeleteNamesAMD(int identifier, uint num, uint* names);

			[RequiredByFeature("GL_AMD_name_gen_delete")]
			[ThreadStatic]
			internal static glDeleteNamesAMD pglDeleteNamesAMD;

			[RequiredByFeature("GL_AMD_name_gen_delete")]
			[SuppressUnmanagedCodeSecurity]
			[return: MarshalAs(UnmanagedType.I1)]
			internal delegate bool glIsNameAMD(int identifier, uint name);

			[RequiredByFeature("GL_AMD_name_gen_delete")]
			[ThreadStatic]
			internal static glIsNameAMD pglIsNameAMD;

		}
	}

}
