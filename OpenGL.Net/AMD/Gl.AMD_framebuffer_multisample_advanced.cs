
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_RENDERBUFFER_STORAGE_SAMPLES_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public const int RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2;

		/// <summary>
		/// [GL] Value of GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public const int MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3;

		/// <summary>
		/// [GL] Value of GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public const int MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4;

		/// <summary>
		/// [GL] Value of GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public const int MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5;

		/// <summary>
		/// [GL] Value of GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public const int NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6;

		/// <summary>
		/// [GL] Value of GL_SUPPORTED_MULTISAMPLE_MODES_AMD symbol.
		/// </summary>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public const int SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7;

		/// <summary>
		/// [GL] glRenderbufferStorageMultisampleAdvancedAMD: Binding for glRenderbufferStorageMultisampleAdvancedAMD.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:RenderbufferTarget"/>.
		/// </param>
		/// <param name="samples">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="storageSamples">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="internalformat">
		/// A <see cref="T:InternalFormat"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public static void RenderbufferStorageMultisampleAMD(RenderbufferTarget target, int samples, int storageSamples, InternalFormat internalformat, int width, int height)
		{
			Debug.Assert(Delegates.pglRenderbufferStorageMultisampleAdvancedAMD != null, "pglRenderbufferStorageMultisampleAdvancedAMD not implemented");
			Delegates.pglRenderbufferStorageMultisampleAdvancedAMD((int)target, samples, storageSamples, (int)internalformat, width, height);
			LogCommand("glRenderbufferStorageMultisampleAdvancedAMD", null, target, samples, storageSamples, internalformat, width, height			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glNamedRenderbufferStorageMultisampleAdvancedAMD: Binding for glNamedRenderbufferStorageMultisampleAdvancedAMD.
		/// </summary>
		/// <param name="renderbuffer">
		/// A <see cref="T:uint"/>.
		/// </param>
		/// <param name="samples">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="storageSamples">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="internalformat">
		/// A <see cref="T:InternalFormat"/>.
		/// </param>
		/// <param name="width">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="height">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
		public static void NamedRenderbufferStorageMultisampleAMD(uint renderbuffer, int samples, int storageSamples, InternalFormat internalformat, int width, int height)
		{
			Debug.Assert(Delegates.pglNamedRenderbufferStorageMultisampleAdvancedAMD != null, "pglNamedRenderbufferStorageMultisampleAdvancedAMD not implemented");
			Delegates.pglNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, (int)internalformat, width, height);
			LogCommand("glNamedRenderbufferStorageMultisampleAdvancedAMD", null, renderbuffer, samples, storageSamples, internalformat, width, height			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glRenderbufferStorageMultisampleAdvancedAMD(int target, int samples, int storageSamples, int internalformat, int width, int height);

			[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glRenderbufferStorageMultisampleAdvancedAMD pglRenderbufferStorageMultisampleAdvancedAMD;

			[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, int internalformat, int width, int height);

			[RequiredByFeature("GL_AMD_framebuffer_multisample_advanced", Api = "gl|glcore|gles2")]
			[ThreadStatic]
			internal static glNamedRenderbufferStorageMultisampleAdvancedAMD pglNamedRenderbufferStorageMultisampleAdvancedAMD;

		}
	}

}
