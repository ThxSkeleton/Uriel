
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

// ReSharper disable RedundantUsingDirective
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable JoinDeclarationAndInitializer

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_PREFER_DOUBLEBUFFER_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;

		/// <summary>
		/// [GL] Value of GL_CONSERVE_MEMORY_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;

		/// <summary>
		/// [GL] Value of GL_RECLAIM_MEMORY_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;

		/// <summary>
		/// [GL] Value of GL_NATIVE_GRAPHICS_HANDLE_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;

		/// <summary>
		/// [GL] Value of GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;

		/// <summary>
		/// [GL] Value of GL_NATIVE_GRAPHICS_END_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;

		/// <summary>
		/// [GL] Value of GL_ALWAYS_FAST_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int ALWAYS_FAST_HINT_PGI = 0x1A20C;

		/// <summary>
		/// [GL] Value of GL_ALWAYS_SOFT_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int ALWAYS_SOFT_HINT_PGI = 0x1A20D;

		/// <summary>
		/// [GL] Value of GL_ALLOW_DRAW_OBJ_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;

		/// <summary>
		/// [GL] Value of GL_ALLOW_DRAW_WIN_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;

		/// <summary>
		/// [GL] Value of GL_ALLOW_DRAW_FRG_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;

		/// <summary>
		/// [GL] Value of GL_ALLOW_DRAW_MEM_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;

		/// <summary>
		/// [GL] Value of GL_STRICT_DEPTHFUNC_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;

		/// <summary>
		/// [GL] Value of GL_STRICT_LIGHTING_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int STRICT_LIGHTING_HINT_PGI = 0x1A217;

		/// <summary>
		/// [GL] Value of GL_STRICT_SCISSOR_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int STRICT_SCISSOR_HINT_PGI = 0x1A218;

		/// <summary>
		/// [GL] Value of GL_FULL_STIPPLE_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int FULL_STIPPLE_HINT_PGI = 0x1A219;

		/// <summary>
		/// [GL] Value of GL_CLIP_NEAR_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int CLIP_NEAR_HINT_PGI = 0x1A220;

		/// <summary>
		/// [GL] Value of GL_CLIP_FAR_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int CLIP_FAR_HINT_PGI = 0x1A221;

		/// <summary>
		/// [GL] Value of GL_WIDE_LINE_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int WIDE_LINE_HINT_PGI = 0x1A222;

		/// <summary>
		/// [GL] Value of GL_BACK_NORMALS_HINT_PGI symbol.
		/// </summary>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public const int BACK_NORMALS_HINT_PGI = 0x1A223;

		/// <summary>
		/// [GL] glHintPGI: Binding for glHintPGI.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:int"/>.
		/// </param>
		/// <param name="mode">
		/// A <see cref="T:int"/>.
		/// </param>
		[RequiredByFeature("GL_PGI_misc_hints")]
		public static void HintPGI(int target, int mode)
		{
			Debug.Assert(Delegates.pglHintPGI != null, "pglHintPGI not implemented");
			Delegates.pglHintPGI(target, mode);
			LogCommand("glHintPGI", null, target, mode			);
			DebugCheckErrors(null);
		}

		internal static unsafe partial class Delegates
		{
			[RequiredByFeature("GL_PGI_misc_hints")]
			[SuppressUnmanagedCodeSecurity]
			internal delegate void glHintPGI(int target, int mode);

			[RequiredByFeature("GL_PGI_misc_hints")]
			[ThreadStatic]
			internal static glHintPGI pglHintPGI;

		}
	}

}
