<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>
// Copyright (C) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using System;
#if HAVE_SYSTEM_DRAWING
using System.Drawing;
#endif
using System.Runtime.InteropServices;

namespace OpenGL
{
<#
	int[] bits8  = new[] {  5, 3,	3, 3,	0, 2,     8  };
	int[] bits15 = new[] { 10, 5,	5, 5,	0, 5,     16 };
	int[] bits16 = new[] { 11, 5,	5, 6,	0, 5,     16 };

	string[] postfixes =		new[] { "8",    "15",     "16",     "24",    "48",     "96",    "F",     "D",      "HF"        };
	string[] interfaceTypes =	new[] { "byte", "byte",	  "byte",   "byte",  "ushort", "uint",  "float", "double", "HalfFloat" };
	string[] pixelTypes =		new[] { "RGB8", "RGB15",  "RGB16",  "RGB24", "RGB48",  "RGB96", "RGBF",  "RGBD",   "RGBHF"     };
	string[] structType =		new[] { "byte", "ushort", "ushort", "byte",  "ushort", "uint",  "float", "double", "HalfFloat" };
	string[] vertexBaseType =	new[] { null,   null,     null,     "Byte",  "UShort", "UInt",  "Float", "Double", "Half" };
	int[] structMembersCount =	new[] {  1,      1,        1,        3,       3,        3,       3,       3,        3          };
	int[][] bitss =				new[] {  bits8,  bits15,   bits16,   null,    null,     null,    null,    null,     null,      };
	string[] zeroes =			new[] { "0",    "0",     "0",      "0",      "0",    "0",   "0.0f",  "0.0",     null };
	string[] ones =				new[] { "byte.MaxValue", "byte.MaxValue", "byte.MaxValue", "byte.MaxValue","ushort.MaxValue", "uint.MaxValue", "1.0f", "1.0", "(HalfFloat)1.0f" };
	string[] castSuffixes =		new[] { null,   null,    null,       "ub",     "us",     "ui",    "f",     "d",       "hf" };
	string[] colorSuffixes =	new[] { null,   null,    null,       "32",     "64",     null,    "F",     null,       "HF" };

	for (int i = 0; i < postfixes.Length; i++) {
		string className = String.Format("ColorRGB{0}", postfixes[i]);
		string interfaceType = interfaceTypes[i];
		string componentType = structType[i];
		string pixelType = pixelTypes[i];
		int[] bits = bitss[i];
		int structTypeBits = bits != null ? bits[bits.Length - 1] : 0;
		string castSuffix = castSuffixes[i];
		string colorSuffix = colorSuffixes[i];
#>
	/// <summary>
	/// RGB color.
	/// </summary>
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct <#= className #>
	{
		#region Constructors

		/// <summary>
		/// Construct a <#= className #> specifying RGB components.
		/// </summary>
		/// <param name="r">
		/// A <see cref="<#= interfaceType #>"/> that specify the red component.
		/// </param>
		/// <param name="g">
		/// A <see cref="<#= interfaceType #>"/> that specify the green component.
		/// </param>
		/// <param name="b">
		/// A <see cref="<#= interfaceType #>"/> that specify the blue component.
		/// </param><#
		if (structMembersCount[i] == 1) {
#>

		public <#= className #>(<#= interfaceType #> r, <#= interfaceType #> g, <#= interfaceType #> b)
		{
			// Reset structure
			rgb = 0;
			// Setup RGB components
			Red = r; Green = g; Blue = b;
		}

<#		} else { #>

		public <#= className #>(<#= interfaceType #> r, <#= interfaceType #> g, <#= interfaceType #> b)
		{
			// Setup RGB components
			this.r = r;
			this.g = g;
			this.b = b;
		}
<#		} #>
		#endregion

		#region Structure
<# if (structMembersCount[i] == 1) { #>

		/// <summary>
		/// RGB color components (packed).
		/// </summary>
		public <#= componentType #> rgb;

<# } else { #>

		/// <summary>
		/// Red color components.
		/// </summary>
		public <#= componentType #> r;

		/// <summary>
		/// Green color components.
		/// </summary>
		public <#= componentType #> g;

		/// <summary>
		/// Blue color components.
		/// </summary>
		public <#= componentType #> b;
<# } #>
		#endregion

		#region Cast Operators

<#		if (colorSuffix != null) { #>
		/// <summary>
		/// Cast to ColorRGBA<#= colorSuffix #> operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="ColorRGBA<#= colorSuffix #>"/> initialized with the vector components.
		/// </returns>
		public static implicit operator ColorRGBA<#= colorSuffix #>(<#= className #> a)
		{
			return (new ColorRGBA<#= colorSuffix #>(a.r, a.g, a.b, <#= ones[i] #>));
		}
<#		}
		if (castSuffix != null) { #>
		/// <summary>
		/// Cast to <#= componentType #>[] operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="T:<#= componentType #>[]"/> initialized with the vector components.
		/// </returns>
		public static implicit operator <#= componentType #>[](<#= className #> a)
		{
			<#= componentType #>[] v = new <#= componentType #>[3];

			v[0] = a.r;
			v[1] = a.g;
			v[2] = a.b;

			return (v);
		}

		/// <summary>
		/// Cast to Vertex3<#= castSuffix #> operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="Vertex4<#= castSuffix #>"/> initialized with the vector components.
		/// </returns>
		public static implicit operator Vertex3<#= castSuffix #>(<#= className #> a)
		{
			return (new Vertex3<#= castSuffix #>(a.r, a.g, a.b));
		}
<#		} #>

#if HAVE_SYSTEM_DRAWING

		/// <summary>
		/// Cast from Color operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="Color"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="T:<#= className #>"/> initialized with the color components.
		/// </returns>
		public static explicit operator <#= className #>(Color a)
		{
			<#= className #> c = new <#= className #>();

			c[0] = (float)a.R / Byte.MaxValue;
			c[1] = (float)a.G / Byte.MaxValue;
			c[2] = (float)a.B / Byte.MaxValue;

			return (c);
		}

#endif

		#endregion

<#
		string zero = zeroes[i], one = ones[i];

		if (zero != null && one != null) {
#>
		#region Notable Colors

		/// <summary>
		/// White color.
		/// </summary>
		public static readonly <#= className #> ColorWhite = new <#= className #>(<#= one #>, <#= one #>, <#= one #>);

		/// <summary>
		/// Black color.
		/// </summary>
		public static readonly <#= className #> ColorBlack = new <#= className #>(<#= zero #>, <#= zero #>, <#= zero #>);

		/// <summary>
		/// Red color.
		/// </summary>
		public static readonly <#= className #> ColorRed = new <#= className #>(<#= one #>, <#= zero #>, <#= zero #>);

		/// <summary>
		/// Green color.
		/// </summary>
		public static readonly <#= className #> ColorGreen = new <#= className #>(<#= zero #>, <#= one #>, <#= zero #>);

		/// <summary>
		/// Blue color.
		/// </summary>
		public static readonly <#= className #> ColorBlue = new <#= className #>(<#= zero #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Yellow color.
		/// </summary>
		public static readonly <#= className #> ColorYellow = new <#= className #>(<#= one #>, <#= one #>, <#= zero #>);

		/// <summary>
		/// Magenta color.
		/// </summary>
		public static readonly <#= className #> ColorMagenta = new <#= className #>(<#= one #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Cyan color.
		/// </summary>
		public static readonly <#= className #> ColorCyan = new <#= className #>(<#= zero #>, <#= one #>, <#= one #>);

		#endregion

<# } #>
		#region IColorRGB<<#= interfaceType #>> Implementation

<# if (structMembersCount[i] == 1) {
	int rOffset = bits[0], rWidth = bits[1];
	int rMask = 1;								for (int b = 1; b < rWidth; b++) rMask = (rMask << 1) | 1;
	int rResetMask = rMask << rOffset;
#>
		/// <summary>
		/// Get or set the red component.
		/// </summary>
		public <#= interfaceType #> Red
		{
			get { return (<#= interfaceType #>)((((rgb >> <#= rOffset #>) & 0x<#= rMask.ToString("X2") #>) / (float)0x<#= rMask.ToString("X2") #>) * <#= interfaceType #>.MaxValue); }
			set { rgb = (<#= componentType #>)unchecked((rgb & ~0x<#= rResetMask.ToString("X2") #>) | (value >> <#= 8 - rWidth #>) << <#= rOffset #>); }
		}

<# } else { #>
		/// <summary>
		/// Get or set the red component.
		/// </summary>
		public <#= interfaceType #> Red
		{
			get { return (r); }
			set { r = value; }
		}

<# }

if (structMembersCount[i] == 1) {
	int gOffset = bits[2], gWidth = bits[3];
	int gMask = 1;							for (int b = 1; b < gWidth; b++) gMask = (gMask << 1) | 1;
	int gResetMask = gMask << gOffset;
#>
		/// <summary>
		/// Get or set the green component.
		/// </summary>
		public <#= interfaceType #> Green
		{
			get { return (<#= interfaceType #>)((((rgb >> <#= gOffset #>) & 0x<#= gMask.ToString("X2") #>) / (float)0x<#= gMask.ToString("X2") #>) * <#= interfaceType #>.MaxValue); }
			set { rgb = (<#= componentType #>)unchecked((rgb & ~0x<#= gResetMask.ToString("X2") #>) | (value >> <#= 8 - gWidth #>) << <#= gOffset #>); }
		}

<# } else { #>
		/// <summary>
		/// Get or set the green component.
		/// </summary>
		public <#= interfaceType #> Green
		{
			get { return (g); }
			set { g = value; }
		}

<# }

if (structMembersCount[i] == 1) {
	int bOffset = bits[4], bWidth = bits[5];
	int bMask = 1;							
	for (int b = 1; b < bWidth; b++) bMask = (bMask << 1) | 1;
	int bResetMask = bMask << bOffset;
#>
		/// <summary>
		/// Get or set the blue component.
		/// </summary>
		public <#= interfaceType #> Blue
		{
			get { return (<#= interfaceType #>)((((rgb >> <#= bOffset #>) & 0x<#= bMask.ToString("X2") #>) / (float)0x<#= bMask.ToString("X2") #>) * <#= interfaceType #>.MaxValue); }
			set { rgb = (<#= componentType #>)unchecked((rgb & ~0x<#= bResetMask.ToString("X2") #>) | (value >> <#= 8 - bWidth #>)); }
		}

<# } else { #>
		/// <summary>
		/// Get or set the blue component.
		/// </summary>
		public <#= interfaceType #> Blue
		{
			get { return (b); }
			set { b = value; }
		}

<# } #>
		#endregion

		#region IColor Implementation

		/// <summary>
		/// Get the PixelLayout correponding to this IColor.
		/// </summary>
		public PixelLayout PixelType { get { return (PixelLayout.<#= pixelType #>); } }

		/// <summary>
		/// Get of set color components.
		/// </summary>
		/// <param name="c">
		/// A <see cref="Int32"/> indicating the color component index.
		/// </param>
		/// <returns>
		/// The color component converted from a normalized floating point number.
		/// </returns>
		/// <exception cref="IndexOutOfRangeException">
		/// Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
		/// </exception>
		public float this[int c]
		{
<# if (interfaceType != "double" && interfaceType != "float"&& interfaceType != "HalfFloat") { #>
			get
			{
				switch (c) {
					case 0: return ((float)Red   / <#= interfaceType #>.MaxValue);
					case 1: return ((float)Green / <#= interfaceType #>.MaxValue);
					case 2: return ((float)Blue  / <#= interfaceType #>.MaxValue);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					case 1: Green = (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					case 2: Blue =  (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } else { #><#
	string explicitCastOnFloat = String.Empty;

	if (componentType == "double")
		explicitCastOnFloat = "(float)";
#>
			get
			{
				switch (c) {
					case 0: return (<#= explicitCastOnFloat #>Red);
					case 1: return (<#= explicitCastOnFloat #>Green);
					case 2: return (<#= explicitCastOnFloat #>Blue);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= interfaceType #>)value; break;
					case 1: Green = (<#= interfaceType #>)value; break;
					case 2: Blue =  (<#= interfaceType #>)value; break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } #>
		}

		#endregion
	}

<#
}
#>
}
