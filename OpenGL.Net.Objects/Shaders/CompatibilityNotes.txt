
===================================================================================================
  SHADER DESIGN LINE
===================================================================================================

=== Preprocessor include support ==================================================================

The shader preprocessor #include directive shall be supported even on older hardware. This is
possible thank to a include preprocessing (using embedded implementation) before sending the
shader source for compilation.

The include processing shall be compatibile with ARB_shading_include extension support. This include
the directory system of the included files.

=== Shader compatibility syntax ===================================================================

The shader library defines a shader include text that allow, by means of preprocessor, a common
syntax to increase compatibility to different shader language versions.

=== Specific platform support =====================================================================

It can happen that a specific platform (renderer/driver) doesn't support a shader language syntax;
to workaround this problem, the shader system shall allow alternative shader implementations for
those specific platforms.

The shader system shall be enought scalable to support those alternative implementation; this means
that attributes and uniforms variables can have a different specification in the alternative
implementation, but requiring to have the same information stored in it.

===================================================================================================
  VERSION QUOTES
===================================================================================================

Storage Qualifiers/Input paragraph quote:

	(1.1) The attribute qualifier can be used only with the data types float, vec2, vec3, vec4, mat2, mat3, and mat4.
	Attribute variables cannot be declared as arrays or structures.
	
	(1.2) The attribute qualifier can be used only with float, floating-point vectors, and matrices. Attribute variables
	cannot be declared as arrays or structures.
	
	(1.3) Vertex shader inputs can only be float, floating-point vectors, matrices, signed and unsigned integers and integer
	vectors. They cannot be arrays or structures.
	
	(1.4) Vertex shader inputs can only be float, floating-point vectors, matrices, signed and unsigned integers and integer
	vectors. They cannot be arrays or structures.
	
	(1.5) Vertex shader inputs can only be float, floating-point vectors, matrices, signed and unsigned integers and integer
	vectors. Vertex shader inputs can also form	arrays of these types, but not structures.

===================================================================================================
  VERSION 1.1
===================================================================================================

===================================================================================================
  VERSION 1.2
===================================================================================================

Minimal version required for shader support.

===================================================================================================
  VERSION 1.3
===================================================================================================

The following is a summary of features added in version 1.3:
	• Integer support:
	• native signed and unsigned integers, integer vectors, and operations
	• bitwise shifts and masking
	• texture indices
	• texture return values
	• integer uniforms, vertex inputs, vertex outputs, fragment inputs, and fragment outputs
	• built-in function support: abs, sign, min, max, clamp, ...
	• Other texture support:
	• Size queries.
	• Texture arrays.
	• Offsetting.
	• Explicit LOD and derivative controls
	• switch/case/default statements.
	• New built-ins: trunc(), round(), roundEven(), isnan(), isinf(), modf()
	• hyperbolic trigonometric functions
	• Preprocessor token pasting (##).
	• User-defined fragment output variables.
	• Shader input and output declarations via in and out.
	• Improved compatibility with OpenGL ES
	• non-perspective (linear) interpolation (nosperspective)
	• new vertex input gl_VertexID.
	• New vertex output and f ragment shader input g l_ClipDistance[].
The following is a summary of features deprecated in version 1.3:
	• Use of the keywords attribute and varying (use in and out).
	• Use of gl_ClipVertex (use gl_ClipDistance)
	• Use of gl_FragData and gl_FragColor (use user-defined out instead).
	• Built-in attributes. Use user-defined vertex inputs instead.
	• Fixed function vertex or fragment stages mixed with shader programs. Provide shaders for all active programmable pipeline stages.
	• All built-in texture function names. See new names.
	• Use of the built-in varyings gl_FogFragCoord and gl_TexCoord. Use user-defined variable instead.
	• The built in function ftransform. Use the invariant qualifier on a vertex output instead.
	• Most built-in state.
	• gl_MaxVaryingFloats (use gl_MaxVaryingComponents instead)
	• Built-in coloring: gl_FrontColor, gl_FrontSecondaryColor, gl_Color, gl_SecondaryColor, gl_BackColor and gl_BackSecondaryColor.
The following is a summary of features that have been removed in version 1.3:
	• None, only deprecations occurred in this release.
	
===================================================================================================
  VERSION 1.4
===================================================================================================

Summary of Functionality differences from version 1.3
	• Minor wording changes, clarifications, and examples added or changed to keep in sync with the OpenGL
	ES specification.
The following features are added or changed:
	• Add uniform blocks and layouts to be backed by the application through buffer bindings.
	• Rectangular textures, including the closure of the functionality indicated by the original
	texture_rectangle extension, the gpu_shader4 extension and the 1.3 version of GLSL.
	• Texture buffers.
	• Add gl_InstanceID for instance drawing.
	• Don't require writing to gl_Position.
The following features, previously deprecated, are removed:
	• Use of gl_ClipVertex. Use gl_ClipDistance instead.
	• Built-in vertex shader inputs.
	• Built-in uniforms except for depth range parameters
	• Built-in interface between vertex and fragment: gl_TexCoord, gl_FogFragCoord, and all the color values.
	• Built-in two-sided coloring.
	• Fixed functionality for a programmable stage. Supply shaders for all stages currently being used.
	• ftransform(). Use invariant outputs instead.
Removed features were recast under the ARB_compatibility extension, within this specification.

===================================================================================================
  VERSION 1.5
===================================================================================================
	
Summary of Functionality differences from version 1.4
	• Created profiles. Turned the compatibility extension into the compatibility profile.
	• Update geometry shader layouts: they must be declared, telling the system the primitive input and
	output types and maximum number of vertices.
	• Added geometry shader constants.
	• Changed gl_FragCoord qualifiers to use the layout() mechanism instead.
	• Made version be 150, 1.50, etc.
	• Added geometry shaders. This includes targeting layers in FBO rendering.
	• Added gl_PrimitiveID as an input to fragment shaders.
	• Added determinant() built-in.
	• Broaden array usage to include vertex shader inputs (vertex in).
	• Broaden structure usage to include fragment and geometry inputs and vertex and geometry outputs.
	• Broadened interface blocks from just uniforms to in and out interfaces as well.
	• Added gl_FragCoord qualifiers origin_upper_left, and pixel_center_integer to modify the values
	returned by gl_FragCoord (and have no affect on any other aspect of the pipeline or language).
	• Removed the ability to have statements before the first case in a switch.
	• Added support for multi-sample textures through sampler2DMS and sampler2DMSArray support
	in texelFetch() and textureSize().
	• Deprecated gl_MaxVaryingComponents;

===================================================================================================
  VERSION 3.30
===================================================================================================
		
Summary of Changes from Version 1.50
	• Note: No features were removed or deprecated between versions 1.50 and 3.30.
	• Added Appendix A to describe include tree and path semantics/syntax for both the language and
	  the API specifications.
	• Add ARB_explicit_attrib_location extension:
		○ Layout qualifiers can declare the location of vertex shader inputs.
		○ Layout qualifiers can declare the location of fragment shader outputs.
	• Add ARB_shader_bit_encoding extension:
		○ Floating-point variables within a shader are encoded according to IEEE 754.
		○ Add built-in functions converting floating-point values to and from signed or unsigned
	      integers representing their encoding.
	• Change #line behavior: The number provided is the number of the next line of code, not the
	  current line. This makes it match C++ semantics.
	• Clarify that the second component of P is unused for 1D shadow lookups.

===================================================================================================
  VERSION 4.00
===================================================================================================

Summary of Changes from Version 3.30

	Note: No features were removed or deprecated between versions 3.30 and 4.00.

	The following features are added:
	• Tessellation, which includes two new programmable stages, tessellation control stage and tessellation
	  evaluation stage. Includes barrier() built-in for synchronization.
	• Polymorphic functions: Run-time selection of what function gets called, through the new keyword
   	  subroutine.
	• 64bit floating point numbers with the new type keyword double. Built-in functions extended for
	  doubles, and new function matching rules are added to both allow implicit conversions when calling a
	  function and preserve most existing function matching once doubles are included.
	• More implicit conversions
		○ float to double, and similarly for all floating-point vector and matrix types
		○ int to uint, and similarly for all integer vector types
		○ int to double, and similarly for all vectors of integers and doubles.
		○ unint to double, and similarly for all vectors of integers and doubles.
	• Cube map array textures and texture functions texture(), textureSize(), textureLod(), and
	   textureGrad().
	• Sampler arrays can take a variable index now, as long as it's value is uniform for all uses.
	• Per-sample shading. Including sample input mask gl_SampleMaskIn[] and per-sample
	   interpolation, with explicit interpolation built-ins interpolateAtCentroid(), interpolateAtSample(),
	  and interpolateAtOffset().
	• New precise qualifier to disallow optimizations that re-order operations or treat different instances of
	   the same operator with different precision.
	• Add a fused multiply and add built-in, fma(), in relation to the new precise qualifier. (Because “a * b
	     + c” will require two operations under new rules for precise.)
	• Added new built-in floating-point functions
		○ frexp() and ldexp()
		○ packUnorm2x16(), packUnorm4x8(), packSnorm4x8(), and packDouble2x32()
		○ unpackUnorm2x16(), unpackUnorm4x8(), unpackSnorm4x8(), and unpackDouble2x32()
	• Add new built-in integer functions
		○ uaddCarry() and usubBorrow()
		○ umulExtended() and imulExtended()
		○ bitfieldExtract() and bitfieldInsert()
		○ bitfieldReverse()
		○ bitCount(), findLSB(), and findMSB()
	• New built-in to query LOD, textureQueryLod().
	• New overloaded function matching algorithm, handling selection from many valid multiple choices.
	• Texture gather functions that return four texels with a single call.
		○ textureGather()
		○ textureGatherOffset()
		○ textureGatherOffsets()
	• Geometry shading
	• Add streams out from geometry shader. Output can be directed to streams through
	  EmitStreamVertex() and EndStreamPrimitive().
	  
===================================================================================================
  VERSION 4.10
===================================================================================================
	  
Summary of Changes from Version 4.00

	Note: No features were removed or deprecated between versions 4.00 and 4.10.
	
	• Support for partitioning shaders into multiple programs to provide light-weight mixing of different
	   shader stages.
	• Improved compatibility with the OpenGL ES Shading Language.
	• Explicitly state the required precision of most operations.
	• Add 64-bit floating-point attributes for vertex shader inputs.
	• Support viewport arrays so where the geometry shader selects which viewport array will transform its
	  output.

===================================================================================================
  VERSION 4.20
===================================================================================================
	
Summary of Changes from Version 4.10

	Note: No features were deprecated between versions 4.10 and 4.20.
	• Move these previously deprecated features to be only in the compatibility profile:
		◦ The keyword attribute for vertex shader inputs. (Use in instead.)
		◦ The keyword varying for inputs and outputs. (Use in and out instead.)
		◦ The original texturing built-in functions. (Use the new forms instead.)
		◦ The built-in variables gl_FragColor and gl_FragData. (Use out instead.)
		◦ Built-in constants related to these.
	• Change from ASCII to UTF-8 for the language character set and also allow any characters inside
	  comments (except the byte value 0), including '\'.
	• Add line-continuation using '\', as in C++.
	• ES convergence
		◦ Add table showing “Treatment of Mismatched Input/Output Variables” in section 4.3.4.
		◦ NaNs are not required to be generated, dividing a non-zero by zero makes inf, see 2nd
		  paragraph 4.7.1 for full modification.
		◦ Clarify that .xyzwxy.xy is illegal, is it temporarily makes a “vec6”.
		◦ Clarify that return statements only accept values (no return of a void function).
	• Add image types (GL_ARB_shader_image_load_store)
		◦ 33 new types, all with “image” in their name, correspond to the non-shadow texture types
		◦ addition of memory qualifiers: coherent, volatile, restrict, readonly, and writeonly
		◦ can read/write/modify images from a shader, through new built-in functions
		◦ qualifiers can act independently on the opaque shader variable and the backing image, so
		  extra qualifiers can be used to separately qualify these
	• Variables declared in if and else statements are scoped only to the end of those statements. Note,
	  this is not backward compatible, it may depend on #version.
	• Allow implicit conversions of return values to the declared type of the function.
	• The const keyword can be used to declare variables within a function body with initializer
	  expressions that are not constant expressions.
	• Qualifiers on variable declarations no longer have to follow a strict order. The layout qualifier
	  can be used multiple times, and multiple parameter qualifiers can be used.
	• Parameter qualifiers can include precision and memory qualifiers.
	• Add a new atomic_uint type to support atomic counters. Also, add built-in functions for
	  manipulating atomic counters.
		◦ atomicCounterIncrement, atomicCounterDecrement, and atomicCounter
	• Add layout qualifier identifiers binding and offset to bind units to sampler and image variable
	   declarations, atomic counters, and uniform blocks.
	• Add built-in functions to pack/unpack 16 bit floating-point numbers
	   (ARB_shading_language_pack2f).
		◦ packHalf2x16 and unpackHalf2x16
		◦ packSnorm2x16 and unpackSnorm2x16
	• Add gl_FragDepth layout qualifiers to communicate what kind of changes will be made to
	  gl_FragDepth (GL_AMD_conservative depth).
	• Add C-style curly brace initializer lists syntax for initializers. Full initialization of aggregates is
	  required when these are used.
	• Allow .length() to be applied to vectors and matrices, returning the number of components or
	  columns.
	• Clarify that .length() returns an int type and can be used as a constant integer expression.
	• Allow swizzle operations on scalars.
	• Even the potential for recursion through subroutine uniforms is an error.
	• Positive signed decimal literals, as well as octal and hexadecimal, can set all 32 bits. This
	  includes setting the sign bit to create a negative value.
	• Make GLSL consistent with the API regarding user clipping, by no longer referring to
	  gl_Position when gl_ClipVertex is not written. Rather, user clipping becomes undefined.
	• Minor consistency fixes, corrections
		◦ Consistently state structures have members not fields. The period ( . ) is still called the field
		  selector, for all its multiple uses.
		◦ Remove comment that there is no communication between instantiations of a shader.
		◦ Clarified that a comma sequence-operator expression cannot be a constant expression. E.g.,
		  “(2,3)” is not allowed, semantically, as a valid constant expression 3, even though it is an
		  expression that will evaluate to 3.
		◦ Use vec2 instead of vec3 for coordinate in textureGather*(sampler2DRect,...).
		◦ Clarify that textureGatherOffset() can take non-constants for the offsets.
	• Correctly restrict indexes of uniform blocks to being dynamically-uniform integral expressions.
	  This correction also applies to earlier releases (4.00 and 4.10), which inadvertently allowed non-
	  uniform indexes.
	• Fix typo to allow integer cube-array textures in the built-in function textureSize().
	  Update the grammar in the last section.
	• Correctly restrict indexes of uniform blocks to being dynamically-uniform integral expressions.
	  This correction also applies to earlier releases (4.00 and 4.10), which inadvertently allowed non-
	  uniform indexes.

===================================================================================================
  VERSION 4.30
===================================================================================================

Summary of Changes from Version 4.20

	Note: No features were deprecated between versions 4.20 and 4.30.

	• Add shader storage buffer objects, as per the ARB_shader_storage_buffer_object extension.
	  This includes 1) allowing the last member of a storage buffer block to be an array that does not
	  know its size until render time, and 2) read/write memory shared with the application and other
	  shader invocations. It also adds the std430 layout qualifier for shader storage blocks.
	• Allow .length() on all arrays; returning a compile-time constant or not, depending on how the
	  array is sized, as per the ARB_shader_storage_buffer_object extension.
	• Be clear that implicit array sizing is only within a stage, not cross stage.
	• Array clarifications: 1) All arrays are inherently homogeneous, except for arrays of the new
	  shader storage buffer objects. 2) Arrays of shader storage buffer objects will be dereferenced
	  when the .length() method is used on an unsized array member, so that must a have valid index.
	  3) Arrays of other objects (uniform blocks) containing implicitly sized arrays will have the same
	  implicit size for all elements of the array.
	• Arrays of arrays are now supported, as per the GL_ARB_arrays_of_arrays extension.
	• Compute shaders are now supported, as per the GL_ARB_compute_shader extension.
	• Added imageSize() built-ins to query the dimensions of an image.
	• Define robust out-of-bounds access behavior when enabled, as per the
	  GL_ARB_robust_buffer_access_behavior extension.
	• All choice of depth or stencil texturing, for a packed depth-stencil texture, as per the
	  GL_ARB_stencil_texturing extension.
	• Allow explicit locations/indexes to be assigned to uniform variables and subroutines, as per the
	  GL_ARB_explicit_uniform_location extension.
	• Accept ES GLSL shader #version statements, which will request ES functionality for ES GLSL
	  versions 100 and 300, as per the GL_ARB_ES3_compatibility extension.
	• Clarified about 90 errors as being either compile time, link time, or either.
	• Clarify and correct scoping rules to what would normally be expected and what was intended.
	  (Function parameters and body nest inside global space. Loop variables and body nest inside
	  loop scope.)
	• There are no digraphs (trigraphs were already disallowed).
	• Remove the CPP difference that it is a compile-time error to use #if or #elif on expressions
	  containing undefined macro names. This reverts back to following expected CPP behavior.
	• Set both gl_MaxFragmentImageUniforms and gl_MaxCombinedImageUniforms to 8.
	• Clarify textureSize() for cube map arrays.
	• For layout qualifiers,
		◦ make negative output locations a compile-time error, and
		◦ make indexes outside the range [0,1] a compile-time error.
	• Allow mismatches in interpolation and auxiliary qualification across stages.
